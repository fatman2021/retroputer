/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 32);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = {
    toHex: function (v, format, prefix) {
        if (format === void 0) { format = "0000"; }
        if (prefix === void 0) { prefix = "0x"; }
        var hexValue = (v === undefined ? "0" : v).toString(16);
        hexValue = format.substr(0, format.length - hexValue.length) + hexValue;
        return "" + prefix + hexValue;
    },
    toHex2: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "00", prefix);
    },
    toHex4: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "0000", prefix);
    },
    toHex5: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "00000", prefix);
    },
    toHex8: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "00000000", prefix);
    },
    byteArrayToHex: function (arr, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = ""; }
        return arr.map(function (b) { return _this.toHex2(b, prefix); }).join(" ");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJoZXhVdGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0lBQ1gsS0FBSyxZQUFDLENBQUMsRUFBRSxNQUFlLEVBQUUsTUFBYTtRQUE5Qix1QkFBQSxFQUFBLGVBQWU7UUFBRSx1QkFBQSxFQUFBLGFBQWE7UUFDbkMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssU0FBUyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEQsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUN4RSxNQUFNLENBQUMsS0FBRyxNQUFNLEdBQUcsUUFBVSxDQUFDO0lBQ2xDLENBQUM7SUFDRCxNQUFNLFlBQUMsQ0FBQyxFQUFFLE1BQWE7UUFBYix1QkFBQSxFQUFBLGFBQWE7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0QsTUFBTSxZQUFDLENBQUMsRUFBRSxNQUFhO1FBQWIsdUJBQUEsRUFBQSxhQUFhO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNELE1BQU0sWUFBQyxDQUFDLEVBQUUsTUFBYTtRQUFiLHVCQUFBLEVBQUEsYUFBYTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRCxNQUFNLFlBQUMsQ0FBQyxFQUFFLE1BQWE7UUFBYix1QkFBQSxFQUFBLGFBQWE7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsY0FBYyxZQUFDLEdBQUcsRUFBRSxNQUFXO1FBQS9CLGlCQUVDO1FBRm1CLHVCQUFBLEVBQUEsV0FBVztRQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDSixDQUFDIn0=

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (immutable) */ __webpack_exports__["a"] = log;
var _log = [];
/**
 * log information to the console -- works for the browser or in a node environment
 *
 * @param {Array} args      data to log
 * @return {void}
 */
function log() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof window !== "undefined") {
        _log.unshift(args.join(" "));
        if (_log.length > 24) {
            _log.pop();
        }
        document.getElementById("log").textContent = _log.join(String.fromCharCode(13) + String.fromCharCode(10));
    }
    else {
        console.log(args.join(" "));
    }
}
if (typeof window !== "undefined") {
    window.log = log;
}
if (typeof global !== "undefined") {
    global.log = log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVkOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE9BQU87SUFBYyxjQUFPO1NBQVAsVUFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztRQUFQLHlCQUFPOztJQUMvQixFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBQ0QsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDO0FBQ0wsQ0FBQztBQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDckIsQ0FBQztBQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDckIsQ0FBQyJ9
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(5)))

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = {
    from8: function (n) {
        return -(n & 0x80) + (n & 0x7F);
    },
    from16: function (n) {
        return -(n & 0x8000) + (n & 0x7FFF);
    },
    to8: function (n) {
        return n & 0xFF;
    },
    to16: function (n) {
        return n & 0xFFFF;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdvc0NvbXBsZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0d29zQ29tcGxlbWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0lBQ1gsS0FBSyxZQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsTUFBTSxZQUFDLENBQUM7UUFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsR0FBRyxZQUFDLENBQUM7UUFDRCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxZQUFDLENBQUM7UUFDRixNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUN0QixDQUFDO0NBQ0osQ0FBQSJ9

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_log_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_hexUtils_js__ = __webpack_require__(0);
/* globals SharedArrayBuffer */


var Memory = (function () {
    function Memory(layout, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.shared, shared = _c === void 0 ? false : _c, _d = _b.withSharedArrayBuffer, withSharedArrayBuffer = _d === void 0 ? undefined : _d;
        this._protected = false;
        this._shared = Boolean(shared || withSharedArrayBuffer);
        this.layout = layout;
        this._buf = withSharedArrayBuffer || new (shared ? SharedArrayBuffer : ArrayBuffer)(layout.size * 1024);
        this._mem = new Uint8Array(this._buf);
        this._rom = new Uint8Array(this._buf, layout.romStart, layout.romLength);
        this.resetStats();
    }
    Object.defineProperty(Memory.prototype, "shared", {
        get: function () {
            return this._shared;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Memory.prototype, "sharedArrayBuffer", {
        get: function () {
            return this.shared ? this._buf : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Memory.prototype, "protected", {
        get: function () {
            return this._protected;
        },
        set: function (v) {
            this._protected = v;
            if (v) {
                this._rom = this.copyFromRange(this.layout.romStart, this.layout.romLength);
            }
        },
        enumerable: true,
        configurable: true
    });
    Memory.prototype.resetStats = function () {
        this.stats = {
            readsTotal: 0,
            byteReadsTotal: 0,
            wordReadsTotal: 0,
            writesTotal: 0,
            byteWritesTotal: 0,
            wordWritesTotal: 0,
            lastReadAddr: 0,
            lastWriteAddr: 0,
            lastValueRead: 0,
            lastValueWritten: 0,
        };
    };
    Memory.prototype.dump = function () {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_log_js__["a" /* default */])("mem stats | reads  8: " + this.stats.byteReadsTotal + "  16: " + this.stats.wordReadsTotal + "  All: " + this.stats.readsTotal);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_log_js__["a" /* default */])("mem stats | writes 8: " + this.stats.byteWritesTotal + "  16: " + this.stats.wordWritesTotal + "  All: " + this.stats.writesTotal);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_log_js__["a" /* default */])("mem stats | last read: " + __WEBPACK_IMPORTED_MODULE_1__util_hexUtils_js__["a" /* default */].toHex4(this.stats.lastValueRead) + "@" + __WEBPACK_IMPORTED_MODULE_1__util_hexUtils_js__["a" /* default */].toHex4(this.stats.lastReadAddr) + "  write: " + __WEBPACK_IMPORTED_MODULE_1__util_hexUtils_js__["a" /* default */].toHex4(this.stats.lastValueWritten) + "@" + __WEBPACK_IMPORTED_MODULE_1__util_hexUtils_js__["a" /* default */].toHex4(this.stats.lastWriteAddr));
    };
    Memory.prototype.loadFromJS = function (data, addrOverride) {
        var _this = this;
        var addr = data.addr;
        if (addrOverride) {
            addr = addrOverride;
        }
        data.data.forEach(function (v, i) {
            _this.poke(i + addr, v);
        });
    };
    /*
      loadFromBIN(bin) {
        // TODO
      }
    */
    Memory.prototype.poke = function (addr, val) {
        addr &= 0x3FFFF;
        var v = (val & 0xFF);
        this._mem[addr] = v;
        /*
        this.stats.lastValueWritten = v;
        this.stats.writesTotal++;
        this.stats.byteWritesTotal++;
        this.stats.lastValueWritten = (val & 0xFF);
        this.stats.lastWriteAddr = addr;
        */
    };
    Memory.prototype.poke16 = function (addr, val) {
        addr &= 0x3FFFF;
        var v = (val & 0xFFFF);
        this._mem[addr] = (v & 0xFF00) >> 8;
        this._mem[addr + 1] = (v & 0x00FF);
        /*
        this.stats.writesTotal++;
        this.stats.wordWritesTotal++;
        this.stats.lastValueWritten = v;
        this.stats.lastWriteAddr = addr;
        */
    };
    Memory.prototype.poke32 = function (addr, val) {
        addr &= 0x3FFFF;
        var v = (val & 0xFFFFFFFF);
        this._mem[addr] = (v & 0xFF000000) >> 24;
        this._mem[addr + 1] = (v & 0x00FF0000) >> 16;
        this._mem[addr + 2] = (v & 0x0000FF00) >> 8;
        this._mem[addr + 3] = (v & 0x000000FF);
        /*
        this.stats.writesTotal++;
        this.stats.lastValueWritten = v;
        this.stats.lastWriteAddr = addr;
        */
    };
    Memory.prototype.peek = function (addr) {
        addr &= 0x3FFFF;
        var v = this._mem[addr];
        if (this._protected) {
            if (addr >= this.layout.romStart && addr <= this.layout.romEnd) {
                v = this._rom[addr - this.layout.romStart];
            }
        }
        /*
        this.stats.readsTotal++;
        this.stats.byteReadsTotal++;
        this.stats.lastValueRead = v;
        this.stats.lastReadAddr = addr;
        */
        return v;
    };
    Memory.prototype.peek16 = function (addr) {
        addr &= 0x3FFFF;
        var v = (this.peek(addr) << 8) | this.peek(addr + 1);
        /*
        this.stats.readsTotal++;
        this.stats.wordReadsTotal++;
        this.stats.lastValueRead = v;
        this.stats.lastReadAddr = addr;
        */
        return v;
    };
    Memory.prototype.peek32 = function (addr) {
        addr &= 0x3FFFF;
        var v = (this.peek(addr) << 24) | (this.peek(addr + 1) << 16) | (this.peek(addr + 2) << 8) | (this.peek(addr + 3));
        /*
        this.stats.readsTotal++;
        this.stats.wordReadsTotal++;
        this.stats.lastValueRead = v;
        this.stats.lastReadAddr = addr;
        */
        return v;
    };
    Memory.prototype.range = function (addr, len) {
        if (addr + len <= this.layout.memtop) {
            return new Uint8Array(this._buf, addr, len);
        }
        else {
            var overflow = (addr + len) - this.layout.memtop;
            len -= overflow;
            if (len < 0) {
                len = 0;
            }
            return new Uint8Array(this._buf, addr, len); //.concat(this.copyFromRange(0, overflow));
        }
    };
    Memory.prototype.copyFromRange = function (addr, len) {
        return Uint8Array.from(this.range(addr, len));
    };
    Memory.prototype.copyWithin = function (_a) {
        var _b = _a === void 0 ? {} : _a, src = _b.src, dest = _b.dest, len = _b.len;
        if (src + len > this.layout.memtop ||
            dest + len > this.layout.memtop) {
            return;
        }
        this._mem.copyWithin(dest, src, src + len);
    };
    Memory.prototype.fillWithin = function (_a) {
        var _b = _a === void 0 ? {} : _a, value = _b.value, addr = _b.addr, len = _b.len;
        if (len + addr > this.layout.memtop) {
            return;
        }
        this._mem.fill(value & 0xFF, addr, addr + len);
    };
    Memory.prototype.setWithin = function (_a) {
        var _b = _a === void 0 ? {} : _a, data = _b.data, addr = _b.addr;
        if (addr + (data.length) > this.layout.memtop) {
            return;
        }
        this._mem.set(data, addr);
    };
    Memory.prototype.range32 = function (addr, len) {
        return new Uint32Array(this._buf, addr, len);
    };
    Memory.prototype.init = function () {
        var _this = this;
        this.protected = false;
        for (var i = 0; i < (this.layout.size * 1024); i++) {
            // simulate old-style memory being random at boot
            this.poke(i, Math.floor(Math.random() * 256));
        }
        // we need three RETs at known important vectors
        [0x0FE00, 0x0FF00, 0x0FFFF].forEach(function (addr) {
            _this.poke(addr, 0xFF);
        });
        // All trap vectors initially point at 0xFFFF
        for (var addr = 0; addr < 512; addr++) {
            this.poke(addr, 0xFF);
        }
        // but we do need a valid FRAME and RESET vector
        this.poke16(0x00000, 0xFF00);
        this.poke16(0x001E0, 0xFE00);
        // loading boot ROM is the responsibility of our owner.
    };
    return Memory;
}());
/* harmony default export */ __webpack_exports__["a"] = Memory;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export memoryLayout */
/* eslint-disable */
/* eslint-disable */ var memoryLayout = {
    size: 256,
    memlen: 0x40000,
    memtop: 0x3FFFF,
    iolen: 256,
    iotop: 0x3FFFF,
    ioComm3DataIn: 0x3FF4F,
    ioComm3DataOut: 0x3FF4E,
    ioComm3Command: 0x3FF4D,
    ioComm3Configuration: 0x3FF4C,
    ioComm2DataIn: 0x3FF4B,
    ioComm2DataOut: 0x3FF4A,
    ioComm2Command: 0x3FF49,
    ioComm2Configuration: 0x3FF48,
    ioComm1DataIn: 0x3FF47,
    ioComm1DataOut: 0x3FF46,
    ioComm1Command: 0x3FF45,
    ioComm1Configuration: 0x3FF44,
    ioComm0DataIn: 0x3FF43,
    ioComm0DataOut: 0x3FF42,
    ioComm0Command: 0x3FF41,
    ioComm0Configuration: 0x3FF40 // b0 = opened; b1 = cmd sent; b2 = cmd ack; b3 = data out sent; b4 = data out ack; b5 = data in sent; b6 = data in ack
    ,
    ioRandomHigh: 0x3FF39,
    ioRandomLow: 0x3FF38,
    ioClockHours: 0x3FF33,
    ioClockMinutes: 0x3FF32,
    ioClockSeconds: 0x3FF31,
    ioClockHundredths: 0x3FF30,
    ioTimer3HighCurrent: 0x3FF2C,
    ioTimer3LowCurrent: 0x3FF2B,
    ioTimer3HighReset: 0x3FF2A,
    ioTimer3LowReset: 0x3FF29,
    ioTimer3Configuration: 0x3FF28,
    ioTimer2HighCurrent: 0x3FF24,
    ioTimer2LowCurrent: 0x3FF23,
    ioTimer2HighReset: 0x3FF22,
    ioTimer2LowReset: 0x3FF21,
    ioTimer2Configuration: 0x3FF20,
    ioTimer1HighCurrent: 0x3FF1C,
    ioTimer1LowCurrent: 0x3FF1B,
    ioTimer1HighReset: 0x3FF1A,
    ioTimer1LowReset: 0x3FF19,
    ioTimer1Configuration: 0x3FF18,
    ioTimer0HighCurrent: 0x3FF14,
    ioTimer0LowCurrent: 0x3FF13,
    ioTimer0HighReset: 0x3FF12,
    ioTimer0LowReset: 0x3FF11,
    ioTimer0Configuration: 0x3FF10 // b0 = enabled; b1: 0 = one-shot, 1 = continuous; b2: 0 = no interrupt, 1 = trigger interrupt; b7 = triggered (manual reset)
    ,
    ioKeyboardDirections: 0x3FF02,
    ioKeyboardModifiers: 0x3FF01,
    ioKeyboardKeyPressed: 0x3FF00,
    iobot: 0x3FF00,
    spriteCount: 16,
    spriteFHeight: 0x340AF,
    spriteEHeight: 0x340AE,
    spriteDHeight: 0x340AD,
    spriteCHeight: 0x340AC,
    spriteBHeight: 0x340AB,
    spriteAHeight: 0x340AA,
    sprite9Height: 0x340A9,
    sprite8Height: 0x340A8,
    sprite7Height: 0x340A7,
    sprite6Height: 0x340A6,
    sprite5Height: 0x340A5,
    sprite4Height: 0x340A4,
    sprite3Height: 0x340A3,
    sprite2Height: 0x340A2,
    sprite1Height: 0x340A1,
    sprite0Height: 0x340A0,
    spriteFWidth: 0x3409F,
    spriteEWidth: 0x3409E,
    spriteDWidth: 0x3409D,
    spriteCWidth: 0x3409C,
    spriteBWidth: 0x3409B,
    spriteAWidth: 0x3409A,
    sprite9Width: 0x34099,
    sprite8Width: 0x34098,
    sprite7Width: 0x34097,
    sprite6Width: 0x34096,
    sprite5Width: 0x34095,
    sprite4Width: 0x34094,
    sprite3Width: 0x34093,
    sprite2Width: 0x34092,
    sprite1Width: 0x34091,
    sprite0Width: 0x34090,
    spriteFTile: 0x3408F,
    spriteETile: 0x3408E,
    spriteDTile: 0x3408D,
    spriteCTile: 0x3408C,
    spriteBTile: 0x3408B,
    spriteATile: 0x3408A,
    sprite9Tile: 0x34089,
    sprite8Tile: 0x34088,
    sprite7Tile: 0x34087,
    sprite6Tile: 0x34086,
    sprite5Tile: 0x34085,
    sprite4Tile: 0x34084,
    sprite3Tile: 0x34083,
    sprite2Tile: 0x34082,
    sprite1Tile: 0x34081,
    sprite0Tile: 0x34080,
    spriteFTileSet: 0x3407F,
    spriteETileSet: 0x3407E,
    spriteDTileSet: 0x3407D,
    spriteCTileSet: 0x3407C,
    spriteBTileSet: 0x3407B,
    spriteATileSet: 0x3407A,
    sprite9TileSet: 0x34079,
    sprite8TileSet: 0x34078,
    sprite7TileSet: 0x34077,
    sprite6TileSet: 0x34076,
    sprite5TileSet: 0x34075,
    sprite4TileSet: 0x34074,
    sprite3TileSet: 0x34073,
    sprite2TileSet: 0x34072,
    sprite1TileSet: 0x34071,
    sprite0TileSet: 0x34070,
    spriteFFGColor: 0x3406F,
    spriteEFGColor: 0x3406E,
    spriteDFGColor: 0x3406D,
    spriteCFGColor: 0x3406C,
    spriteBFGColor: 0x3406B,
    spriteAFGColor: 0x3406A,
    sprite9FGColor: 0x34069,
    sprite8FGColor: 0x34068,
    sprite7FGColor: 0x34067,
    sprite6FGColor: 0x34066,
    sprite5FGColor: 0x34065,
    sprite4FGColor: 0x34064,
    sprite3FGColor: 0x34063,
    sprite2FGColor: 0x34062,
    sprite1FGColor: 0x34061,
    sprite0FGColor: 0x34060,
    spriteFBGColor: 0x3405F,
    spriteEBGColor: 0x3405E,
    spriteDBGColor: 0x3405D,
    spriteCBGColor: 0x3405C,
    spriteBBGColor: 0x3405B,
    spriteABGColor: 0x3405A,
    sprite9BGColor: 0x34059,
    sprite8BGColor: 0x34058,
    sprite7BGColor: 0x34057,
    sprite6BGColor: 0x34056,
    sprite5BGColor: 0x34055,
    sprite4BGColor: 0x34054,
    sprite3BGColor: 0x34053,
    sprite2BGColor: 0x34052,
    sprite1BGColor: 0x34051,
    sprite0BGColor: 0x34050,
    spriteFScale: 0x3404F,
    spriteEScale: 0x3404E,
    spriteDScale: 0x3404D,
    spriteCScale: 0x3404C,
    spriteBScale: 0x3404B,
    spriteAScale: 0x3404A,
    sprite9Scale: 0x34049,
    sprite8Scale: 0x34048,
    sprite7Scale: 0x34047,
    sprite6Scale: 0x34046,
    sprite5Scale: 0x34045,
    sprite4Scale: 0x34044,
    sprite3Scale: 0x34043,
    sprite2Scale: 0x34042,
    sprite1Scale: 0x34041,
    sprite0Scale: 0x34040,
    spriteFYPosition: 0x3403F,
    spriteEYPosition: 0x3403E,
    spriteDYPosition: 0x3403D,
    spriteCYPosition: 0x3403C,
    spriteBYPosition: 0x3403B,
    spriteAYPosition: 0x3403A,
    sprite9YPosition: 0x34039,
    sprite8YPosition: 0x34038,
    sprite7YPosition: 0x34037,
    sprite6YPosition: 0x34036,
    sprite5YPosition: 0x34035,
    sprite4YPosition: 0x34034,
    sprite3YPosition: 0x34033,
    sprite2YPosition: 0x34032,
    sprite1YPosition: 0x34031,
    sprite0YPosition: 0x34030,
    spriteFXPosition: 0x3401F,
    spriteEXPosition: 0x3401E,
    spriteDXPosition: 0x3401D,
    spriteCXPosition: 0x3401C,
    spriteBXPosition: 0x3401B,
    spriteAXPosition: 0x3401A,
    sprite9XPosition: 0x34019,
    sprite8XPosition: 0x34018,
    sprite7XPosition: 0x34017,
    sprite6XPosition: 0x34016,
    sprite5XPosition: 0x34015,
    sprite4XPosition: 0x34014,
    sprite3XPosition: 0x34013,
    sprite2XPosition: 0x34012,
    sprite1XPosition: 0x34011,
    sprite0XPosition: 0x34010,
    spriteFLayer: 0x3400F,
    spriteELayer: 0x3400E,
    spriteDLayer: 0x3400D,
    spriteCLayer: 0x3400C,
    spriteBLayer: 0x3400B,
    spriteALayer: 0x3400A,
    sprite9Layer: 0x34009,
    sprite8Layer: 0x34008,
    sprite7Layer: 0x34007,
    sprite6Layer: 0x34006,
    sprite5Layer: 0x34005,
    sprite4Layer: 0x34004,
    sprite3Layer: 0x34003,
    sprite2Layer: 0x34002,
    sprite1Layer: 0x34001,
    sprite0Layer: 0x34000,
    spriteStart: 0x34000,
    tilePagesLength: 0x04000,
    tilePageLength: 0x01000,
    tilePage3Layer: 0x33FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage3OffsetY: 0x33FFE // signed Y offset for smooth scrolling
    ,
    tilePage3OffsetX: 0x33FFD // signed X offset for smooth scrolling
    ,
    tilePage3Set: 0x33FFC // 0 - 3, which tileset to use
    ,
    tilePage3Scale: 0x33FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage3CropY: 0x33FFA // height of area to ignore when compositing (border)
    ,
    tilePage3CropX: 0x33FF9 // width of area to ignore when compositing (border)
    ,
    tilePage3FGColor: 0x33800,
    tilePage3BGColor: 0x33400,
    tilePage3: 0x33000,
    tilePage2Layer: 0x32FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage2OffsetY: 0x32FFE // signed Y offset for smooth scrolling
    ,
    tilePage2OffsetX: 0x32FFD // signed X offset for smooth scrolling
    ,
    tilePage2Set: 0x32FFC // 0 - 3, which tileset to use
    ,
    tilePage2Scale: 0x32FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage2CropY: 0x32FFA // height of area to ignore when compositing (border)
    ,
    tilePage2CropX: 0x32FF9 // width of area to ignore when compositing (border)
    ,
    tilePage2FGColor: 0x32800,
    tilePage2BGColor: 0x32400,
    tilePage2: 0x32000,
    tilePage1Layer: 0x31FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage1OffsetY: 0x31FFE // signed Y offset for smooth scrolling
    ,
    tilePage1OffsetX: 0x31FFD // signed X offset for smooth scrolling
    ,
    tilePage1Set: 0x31FFC // 0 - 3, which tileset to use
    ,
    tilePage1Scale: 0x31FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage1CropY: 0x31FFA // height of area to ignore when compositing (border)
    ,
    tilePage1CropX: 0x31FF9 // width of area to ignore when compositing (border)
    ,
    tilePage1FGColor: 0x31800,
    tilePage1BGColor: 0x31400,
    tilePage1: 0x31000,
    tilePage0Layer: 0x30FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage0OffsetY: 0x30FFE // signed Y offset for smooth scrolling
    ,
    tilePage0OffsetX: 0x30FFD // signed X offset for smooth scrolling
    ,
    tilePage0Set: 0x30FFC // 0 - 3, which tileset to use
    ,
    tilePage0Scale: 0x30FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage0CropY: 0x30FFA // height of area to ignore when compositing (border)
    ,
    tilePage0CropX: 0x30FF9 // width of area to ignore when compositing (border)
    ,
    tilePage0FGColor: 0x30800,
    tilePage0BGColor: 0x30400,
    tilePage0: 0x30000,
    tilePagesStart: 0x30000,
    tileSetsLength: 65536,
    tileSetLength: 16384,
    tileSet3: 0x2C000 // tileset 3
    ,
    tileSet2: 0x28000 // tileset 2
    ,
    tileSet1: 0x24000 // tileset 1
    ,
    tileSet0: 0x20000 // 16K 256 8x8 tileset 0
    ,
    tileSetsStart: 0x20000,
    paletteLength: 1024,
    paletteLength32: 256,
    paletteStart: 0x1FC00 // 256 x 4 bytes
    ,
    backgroundColor: 0x1FA0B // background color for screen
    ,
    borderSizeY: 0x1FA06 // height of vertical border in px
    ,
    borderSizeX: 0x1FA05 // width of horizontal border in px
    ,
    borderColor: 0x1FA04 // Border Color
    ,
    graphicsLayer: 0x1FA02 // 0 - 7, graphica layer; FF = no display
    ,
    screenConfigLength: 256,
    screenConfigStart: 0x1FA00,
    graphicsLength: 64000,
    graphicsStart: 0x10000 // 320 x 200 (64000) bytes
    ,
    romLength: 0x04000 // length of rom
    ,
    romEnd: 0x0FFFF // End of ROM
    ,
    romStart: 0x0C000 // Start of ROM
    ,
    romScratchStart: 0x0B000 // ROM scratch area
    ,
    codeStart: 0x01000 // Start of code execution
    ,
    stackTop: 0x00FFF // top of stack (grows down)
    ,
    stackMax: 0x00400 // bottom of stack
    ,
    trapReset: 0x00000 // jump to instruction when reset
    ,
    traps: 0x00000 // 256 2-byte long pointers; ends 0x001FF
    ,
    membot: 0x00000
};
/* harmony default export */ __webpack_exports__["a"] = memoryLayout;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 5 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = {
    FRAME: 0xF0,
    RESET: 0x00
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFwcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0lBQ1gsS0FBSyxFQUFFLElBQUk7SUFDWCxLQUFLLEVBQUUsSUFBSTtDQUNkLENBQUEifQ==

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Register_js__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_log_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__semantics_js__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__decoder_js__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__traps_js__ = __webpack_require__(6);






var CPU = (function () {
    function CPU(memory) {
        // status
        this.running = false;
        this.paused = false;
        this.stepping = false;
        // register and flag mapping
        this.registers = [
            new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("A", 2), new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("B", 2),
            new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("C", 2), new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("D", 2),
            new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("X", 2), new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("Y", 2),
            new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("SP", 2), new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("BP", 2),
            undefined, undefined,
            undefined, undefined,
            new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("SB", 1), new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("DB", 1),
            new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("F", 1), new __WEBPACK_IMPORTED_MODULE_0__Register_js__["a" /* default */]("PC", 2)
        ];
        this.registerMap = {
            A: 0, AL: 0, B: 1, BL: 0,
            C: 2, CL: 2, D: 3, DL: 3,
            X: 4, XL: 4, Y: 5, YL: 5,
            SP: 6, BP: 7, SB: 12, DB: 13,
            F: 14, Flags: 14, PC: 15,
            0: "A(L)", 1: "B(L)", 2: "C(L)", 3: "D(L)",
            4: "X(L)", 5: "Y(L)", 6: "SP", 7: "BP",
            12: "SB", 13: "DB", 14: "Flags", 15: "PC"
        };
        this.flagMap = {
            0: "Z", 1: "N", 2: "C", 3: "V", 4: "E", 5: "X", 6: "M", 7: "I",
            "Z": 0, "N": 1, "C": 2, "V": 3, "E": 4, "X": 5, "M": 6, "I": 7,
            "EQ": 0, "LT": 2, "O": 3
        };
        this.addressingModeMap = ["imm8/rel8", "imm16/rel16", "abs16", "ind16", "relBP", "indBP", "absD", "indD"];
        // need to keep track of memory
        this.memory = memory;
        // semantics for execution
        this.semantics = __WEBPACK_IMPORTED_MODULE_3__semantics_js__["a" /* default */].semantics;
        this.semanticsMap = __WEBPACK_IMPORTED_MODULE_3__semantics_js__["a" /* default */].semanticsMap;
        this.mapStateToAsm = __WEBPACK_IMPORTED_MODULE_3__semantics_js__["a" /* default */].mapStateToAsm.bind(this, this);
        // bind semantic exec to our execute
        this.execute = __WEBPACK_IMPORTED_MODULE_3__semantics_js__["b" /* exec */].bind(this);
        // also bind decode
        this.decode = __WEBPACK_IMPORTED_MODULE_4__decoder_js__["a" /* default */].bind(this);
        this.init();
    }
    CPU.prototype.init = function () {
        // give defaults for registers and flags
        this.registers[this.registerMap.SP].U16 = 0x1000;
        this.registers[this.registerMap.BP].U16 = 0x1000;
        this.setFlag(this.flagMap.X);
        this.setFlag(this.flagMap.I);
        // instruction decoding and execution state
        this.state = {};
        this.clearState();
    };
    /**
     * Returns the value of the requested flag
     * @param {number} flag     flag index
     * @returns {boolean}       value of flag
     */
    CPU.prototype.getFlag = function (flag) {
        return (this.registers[this.registerMap.Flags].U8 & (0x01 << flag)) > 0;
    };
    /**
     * Sets the requested flag to 1
     * @param {number} flag     flag to set
     * @return {void}
     */
    CPU.prototype.setFlag = function (flag) {
        this.registers[this.registerMap.Flags].U8 |= (0x01 << flag);
    };
    /**
     * clears the requested flag
     * @param {number} flag     flag to clear
     * @return {void}
     */
    CPU.prototype.clrFlag = function (flag) {
        if (this.getFlag(flag)) {
            this.registers[this.registerMap.Flags].U8 -= (0x01 << flag);
        }
    };
    /**
     * Pushes a register or value onto the stack. If reg is supplied, that contents
     * are pushed onto the stack. If reg is udnefined, v is pushed. In the latter case,
     * dsize must be either 1 (byte) or 2 (word)
     *
     * @param {Register} reg      register to push
     * @param {number} [v]        or value
     * @param {number} [dsize=2]  # bytes to push
     * @return {void}
     */
    CPU.prototype.push = function (reg, v, dsize) {
        if (dsize === void 0) { dsize = 2; }
        var SP = this.registers[this.registerMap.SP];
        var size = (reg ? reg.size : dsize);
        SP.U16 -= size;
        if (size === 1) {
            this.memory.poke(SP.U16, (reg ? reg.U8 : v));
        }
        else {
            this.memory.poke16(SP.U16, (reg ? reg.U16 : v));
        }
    };
    /**
     * Pops a value from the stack and stores it in reg, if provided. Returns the value
     * regardless. If reg is undefined, dsize is used to determine how much to pop --
     * 1 = byte, 2 = word
     *
     * @param {Register} reg        register to pop stack into
     * @param {number} [dsize=2]    size of data
     * @return {number}             value popped
     */
    CPU.prototype.pop = function (reg, dsize) {
        if (dsize === void 0) { dsize = 2; }
        var v;
        var SP = this.registers[this.registerMap.SP];
        var size = (reg ? reg.size : dsize);
        if (size === 1) {
            v = this.memory.peek(SP.U16);
            if (reg) {
                reg.U8 = v;
            }
        }
        else {
            v = this.memory.peek16(SP.U16);
            if (reg) {
                reg.U16 = v;
            }
        }
        SP.U16 += size;
        return v;
    };
    /**
     * Clears the CPU's decode/execute state
     *
     * @return {void}
     */
    CPU.prototype.clearState = function () {
        var state = this.state;
        state.instruction = [];
        state.opcodeType = 0x00; // type of opcode -- if extended, first byte of instruction
        state.opcode = 0x00; // instruction
        state.semantic = 0x00; // what should we actually do?
        state.imm8 = 0x00; // imm8 of instruction, if it makes sense
        state.imm16 = 0x0000; // imm16 of instruction, if it makes sense
        state.srcRegister = 0x00; // source register
        state.destRegister = 0x00; // destination register
        state.othRegister = 0x00; // other register
        state.flag = 0x00; // flag index
        state.srcBank = 0x00; // source bank select
        state.destBank = 0x00; // destination bank select
        state.whichBank = 0x00; // 00 = SB, 01 = DB
        state.addressingMode = 0x00; // addressing mode
        state.indexByX = false;
        state.indexByY = false;
        state.scale = 0;
    };
    /**
     * dumps the CPU's internal state
     * @return {void}
     */
    CPU.prototype.dump = function () {
        var _this = this;
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])("---- REGISTERS");
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])(this.registers.map(function (r) { return (r ? (r ? r.name : "") + ": " + (r ? __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__["a" /* default */].toHex4(r.U16) : "") + " " : ""); }).join(""));
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])([7, 6, 5, 4, 3, 2, 1, 0].map(function (flag) { return _this.flagMap[flag] + ": " + (_this.getFlag(flag) ? 1 : 0) + ", "; }).join(""));
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])("---- STATE");
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])("inst[]=", this.state.instruction.map(function (b) { return __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__["a" /* default */].toHex2(b); }), "|", "opcode=", __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__["a" /* default */].toHex2(this.state.opcode), "|", "semantic=", __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__["a" /* default */].toHex2(this.state.semantic), this.semanticsMap[this.state.semantic]);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])("imm8=", __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__["a" /* default */].toHex2(this.state.imm8), "|", "imm16=", __WEBPACK_IMPORTED_MODULE_2__util_hexUtils_js__["a" /* default */].toHex2(this.state.imm16), "|", "srcR=", this.registerMap[this.state.srcRegister], "|", "dstR=", this.registerMap[this.state.destRegister], "|", "flag=", this.flagMap[this.state.flag], "|");
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])("bank selects", "src=", this.state.srcBank, "dst=", this.state.destBank, "|", "address mode=", this.addressingModeMap[this.state.addressingMode], "|", "index by", "X?", this.state.indexByX ? "Y" : "N", "Y?", this.state.indexByY ? "Y" : "N", "|", "scale=", this.state.scale ? "byte" : "word");
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_log_js__["a" /* default */])("");
    };
    /**
     * fetches the desired byte (n) of the current instruction. If n is zero, the CPU's execution
     * and decode state is cleared first.
     * @param {number} n     indicates fetch stage (0 = start of new instruction)
     * @return {void}
     */
    CPU.prototype.fetch = function (n) {
        if (n === 0) {
            //this.clearState();
            this.state.instruction = [];
        }
        var rPC = this.registers[this.registerMap.PC].U16;
        this.state.instruction.push(this.memory.peek(rPC + n));
    };
    /**
     * Advance PC by the length of the current instruction
     * @return {void}
     */
    CPU.prototype.advancePC = function () {
        this.registers[this.registerMap.PC].U16 += this.state.instruction.length;
    };
    /**
     * Steps the CPU by a single instruction. If skipFetch is TRUE, then the expectation is that an
     * instruction is already present in this.state.instruction and that it needs decoded and executed.
     * This is typical of hardware interrupts.
     *
     * @param {boolean} [skipFetch=false]     if true, skip fetch phase (an instruction is already in the pipeline)
     * @return {void}
     */
    CPU.prototype.step = function (skipFetch) {
        if (skipFetch === void 0) { skipFetch = false; }
        if (!skipFetch) {
            this.fetch(0); // get first byte of instruction
        }
        // decode the instruction; additional fetches occur as necessary
        this.decode(!skipFetch);
        // and advance PC, unless we've not fetched an instruction, in which case we shouldn't advance
        if (!skipFetch) {
            this.advancePC();
        }
        // if X is set, execute the instruction. OR, execute it if we're called with skipFetch
        // which means we're probably servicing an interrupt
        if (this.getFlag(this.flagMap.X) || skipFetch) {
            this.execute();
            if (!this.getFlag(this.flagMap.X)) {
                this.step(); // go ahead and skip the next instruction
                this.setFlag(this.flagMap.X); // Flags.X can only skip one cycle
            }
        }
    };
    /**
     * Send a trap to the CPU; actually injects a TRAP instruction and executes it
     * All traps are maskable EXCEPT 0x00 (RESET). If the CPU was previously HALTed,
     * it resumes execution.
     * @param {number} trap       trap to send
     * @return {void}
     */
    CPU.prototype.sendTrap = function (trap) {
        if (trap === __WEBPACK_IMPORTED_MODULE_5__traps_js__["a" /* default */].RESET || (trap > __WEBPACK_IMPORTED_MODULE_5__traps_js__["a" /* default */].RESET && this.getFlag(this.flagMap.I))) {
            this.paused = false;
            this.state.instruction = [0x06, 0x01, trap];
            this.step(true); // don't fetch anything -- we want the above instruction
        }
    };
    CPU.prototype.pause = function (imm8) {
        if (imm8 === 0xFF) {
            // Really, really halt!
            this.running = false;
        }
        this.paused = true;
    };
    return CPU;
}());
/* harmony default export */ __webpack_exports__["a"] = CPU;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var Register = (function () {
    function Register(name, size) {
        this.name = name;
        this.size = size;
        this._mask = [0x03, 0xFF, 0xFFFF][size];
        this._data = 0;
    }
    Object.defineProperty(Register.prototype, "U2", {
        get: function () {
            return this._data & 0x03;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Register.prototype, "U8", {
        get: function () {
            return this._data & 0xFF;
        },
        set: function (value) {
            this._data = (this._data & 0xFF00) | (value & 0xFF);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Register.prototype, "U16", {
        get: function () {
            return this._data & this._mask;
        },
        set: function (value) {
            this._data = value & this._mask;
        },
        enumerable: true,
        configurable: true
    });
    return Register;
}());
/* harmony default export */ __webpack_exports__["a"] = Register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSZWdpc3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUVFLGtCQUFhLElBQUksRUFBRSxJQUFJO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxzQkFBSSx3QkFBRTthQUFOO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksd0JBQUU7YUFBTjtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDO2FBRUQsVUFBTyxLQUFLO1lBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdEQsQ0FBQzs7O09BSkE7SUFNRCxzQkFBSSx5QkFBRzthQUFQO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNqQyxDQUFDO2FBRUQsVUFBUSxLQUFLO1lBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNsQyxDQUFDOzs7T0FKQTtJQUtILGVBQUM7QUFBRCxDQUFDLEFBNUJELElBNEJDIn0=

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = decode;
// exports to be bound to a cpu
// exports to be bound to a cpu
function decode(fetch) {
    if (fetch === void 0) { fetch = true; }
    var opcode = this.state.instruction[0];
    var opparm = 0x00;
    var opcodeExt = 0x00;
    var opcodeType = 0x00;
    if (fetch) {
        switch (opcode) {
            case 0x01:
            case 0x02:
            case 0x04:
            case 0x05:
                this.fetch(1);
                break;
            case 0x06:
                this.fetch(1);
                this.fetch(2);
                break;
            case 0x07:
                this.fetch(1);
                this.fetch(2);
                this.fetch(3);
                break;
            default:
        }
        if (opcode >= 0x40 && opcode <= 0xBF) {
            this.fetch(1);
            this.fetch(2);
        }
    }
    this.state.opcodeType = opcodeType;
    this.state.opcode = opcode;
    switch (this.state.instruction.length) {
        case 1:
            if (opcode === 255) {
                this.state.semantic = this.semantics.RET;
                break;
            }
            if (opcode === 0x00) {
                this.state.semantic = this.semantics.NOP;
                break;
            }
            if (opcode === 0x03) {
                this.state.semantic = this.semantics.TRAP;
                this.destRegister = this.registerMap.AL;
                this.srcRegister = this.destRegister;
                break;
            }
            if ((opcode & 248) === 8) {
                this.state.semantic = this.semantics.MOVE;
                this.state.destRegister = (opcode & 4) ? this.registerMap.DB : this.registerMap.SB;
                this.state.srcRegister = (opcode & 3);
                break;
            }
            if ((opcode & 240) === 16) {
                this.state.semantic = (opcode & 8) ? this.semantics.DEC : this.semantics.INC;
                this.state.destRegister = (opcode & 7);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            if ((opcode & 240) === 32) {
                this.state.semantic = (opcode & 8) ? this.semantics.IFNFLAG : this.semantics.IFFLAG;
                this.state.flag = (opcode & 7);
                break;
            }
            if ((opcode & 240) === 48) {
                this.state.semantic = (opcode & 8) ? this.semantics.CLRFLAG : this.semantics.SETFLAG;
                this.state.flag = (opcode & 7);
                break;
            }
            if ((opcode & 224) === 192) {
                this.state.semantic = this.semantics.MOVE;
                this.state.destRegister = (opcode & 28) >> 2;
                this.state.srcRegister = (opcode & 3);
                break;
            }
            if ((opcode & 224) === 224) {
                this.state.semantic = (opcode & 16) ? this.semantics.POP : this.semantics.PUSH;
                this.state.destRegister = (opcode & 15);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        case 2:
            opcodeExt = this.state.instruction[1];
            if ((opcode === 0x01)) {
                this.state.semantic = this.semantics.ENTER;
                this.state.imm8 = opcodeExt;
                break;
            }
            if ((opcode === 0x02)) {
                this.state.semantic = this.semantics.EXIT;
                this.state.imm8 = opcodeExt;
                break;
            }
            if ((opcode === 0x04) && ((opcodeExt & 128) === 0)) {
                this.state.semantic = (opcodeExt & 64) ? this.semantics.SUB : this.semantics.ADD;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x04) && ((opcodeExt & 192) === 128)) {
                this.state.semantic = this.semantics.XOR;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x04) && ((opcodeExt & 192) === 192)) {
                this.state.semantic = this.semantics.CMP;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x05) && ((opcodeExt & 128) === 0)) {
                this.state.semantic = (opcodeExt & 64) ? this.semantics.SHR : this.semantics.SHL;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x05) && ((opcodeExt & 192) === 128)) {
                this.state.semantic = this.semantics.AND;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x05) && ((opcodeExt & 192) === 192)) {
                this.state.semantic = this.semantics.OR;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        case 3:
            if (opcode === 0x06) {
                opcode = (opcode << 8) | this.state.instruction[1];
                opparm = this.state.instruction[2];
            }
            if ((opcode === 0x0601)) {
                this.state.semantic = this.semantics.TRAP;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x0608)) {
                this.state.semantic = this.semantics.NEG;
                this.state.destRegister = (opparm & 7);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            if ((opcode === 0x0610)) {
                this.state.semantic = this.semantics.BYTESWAP;
                this.state.destRegister = (opparm & 7);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            if ((opcode === 0x0614)) {
                this.state.semantic = this.semantics.HALT;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x0618)) {
                this.state.semantic = this.semantics.PUSHA;
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if ((opcode === 0x0619)) {
                this.state.semantic = this.semantics.POPA;
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if ((opcode >= 0x0620) && opcode < 0x0640) {
                this.state.srcRegister = (opcode & 7);
                this.state.destRegister = this.state.srcRegister;
                this.state.semantic = [this.semantics.SETR, this.semantics.CLRR, this.semantics.IFR, this.semantics.IFNR][(opcode & 24) >> 3];
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x0640)) {
                this.state.semantic = this.semantics.IMUL;
                this.state.othRegister = (opparm & 192) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x0641)) {
                this.state.semantic = this.semantics.IDIV;
                this.state.othRegister = (opparm & 192) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x0642)) {
                this.state.semantic = this.semantics.IMOD;
                this.state.othRegister = (opparm & 192) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode >= 0x0650) && (opcode <= 0x0653)) {
                var deltaAtoC = 2;
                this.state.semantic = this.semantics.LOOP;
                this.state.srcRegister = (opcode & 0x03) + deltaAtoC;
                this.state.destRegister = this.state.srcRegister;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x066D)) {
                this.state.semantic = this.semantics.MEMFILL;
                this.state.destBank = (opparm & 128) >> 7;
                this.state.srcBank = 0x00;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x066E)) {
                this.state.semantic = this.semantics.MEMSWAP;
                this.state.destBank = (opparm & 128) >> 7;
                this.state.srcBank = (opparm & 64) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x066F)) {
                this.state.semantic = this.semantics.MEMCOPY;
                this.state.destBank = (opparm & 128) >> 7;
                this.state.srcBank = (opparm & 64) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode & 65520) === 0x0670) {
                this.state.semantic = (opcode & 8) ? this.semantics.OUT : this.semantics.IN;
                this.state.destRegister = (opcode & 7);
                this.state.srcRegister = this.state.destRegister;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode & 65472) === 0x0680) {
                this.state.semantic = this.semantics.MOVE;
                this.state.destRegister = (opcode & 56) >> 3;
                this.state.srcRegister = (opcode & 7);
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if ((opcode & 65472) === 0x06C0) {
                this.state.semantic = this.semantics.SWAP;
                this.state.destRegister = (opcode & 56) >> 3;
                this.state.srcRegister = (opcode & 7);
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if (opcode >= 0x40 && opcode < 0xC0) {
                this.state.semantic = ((opcode & 192) === 0x80) ? this.semantics.STORE : this.semantics.LOAD;
                this.state.destRegister = this.registerMap.A;
                this.state.srcRegister = this.registerMap.A;
                this.state.addressingMode = (opcode & 56) >> 3;
                this.state.indexByX = (opcode & 4) >> 2;
                this.state.indexByY = (opcode & 2) >> 1;
                this.state.scale = (opcode & 1);
                this.state.whichBank = (this.state.semantic === this.semantics.STORE ? 0x01 : 0x00);
                if (this.state.addressingMode === 0) {
                    this.state.imm8 = (this.state.instruction[1]);
                    this.state.instruction.pop();
                }
                else if (this.state.addressingMode >= 6) {
                    this.state.imm16 = 0;
                    this.state.instruction.pop();
                    this.state.instruction.pop();
                }
                else {
                    this.state.imm16 = (this.state.instruction[1] << 8) | this.state.instruction[2];
                }
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        case 4:
            opcode = this.state.instruction[1];
            if ((opcode & 128) === 0) {
                this.state.semantic = (opcode & 64) ? this.semantics.CALL : this.semantics.BR;
                this.state.addressingMode = (opcode & 56) >> 3;
                this.state.indexByX = (opcode & 4) >> 2;
                this.state.indexByY = (opcode & 2) >> 1;
                this.state.scale = (opcode & 1);
                this.state.whichBank = 0x00;
                if (this.state.scale > 0) {
                    this.state.imm16 = (this.state.instruction[2] << 8) | this.state.instruction[3];
                }
                else {
                    this.state.imm8 = this.state.instruction[2];
                    this.state.instruction.pop(); // give a byte back
                }
                break;
            }
            if ((opcode & 128) === 128) {
                this.state.semantic = (opcode & 64) ? this.semantics.STORE : this.semantics.LOAD;
                this.state.destRegister = this.registerMap.A;
                this.state.srcRegister = this.registerMap.A;
                this.state.addressingMode = (opcode & 56) >> 3;
                this.state.indexByX = (opcode & 4) >> 2;
                this.state.indexByY = (opcode & 2) >> 1;
                this.state.scale = (opcode & 1);
                this.state.whichBank = (this.state.semantic === this.semantics.STORE ? 0x00 : 0x01);
                if (this.state.addressingMode === 0) {
                    this.state.imm8 = (this.state.instruction[2]);
                    this.state.instruction.pop();
                }
                else if (this.state.addressingMode >= 6) {
                    this.state.imm16 = 0;
                    this.state.instruction.pop();
                    this.state.instruction.pop();
                }
                else {
                    this.state.imm16 = (this.state.instruction[2] << 8) | this.state.instruction[3];
                }
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        default:
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlY29kZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQzdCLEFBREYsK0JBQStCO0FBQzdCLE1BQU0sQ0FBQyxPQUFPLGlCQUFpQixLQUFZO0lBQVosc0JBQUEsRUFBQSxZQUFZO0lBQ3pDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztJQUNsQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDckIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBRXRCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDVixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2YsS0FBSyxJQUFJLENBQUM7WUFDVixLQUFLLElBQUksQ0FBQztZQUNWLEtBQUssSUFBSSxDQUFDO1lBQ1YsS0FBSyxJQUFJO2dCQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsS0FBSyxDQUFDO1lBQ1IsS0FBSyxJQUFJO2dCQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDZCxLQUFLLENBQUM7WUFDUixLQUFLLElBQUk7Z0JBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsS0FBSyxDQUFDO1lBQ1IsUUFBUTtRQUNWLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMs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aEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7Z0JBQ2pELEtBQUssQ0FBQztZQUNSLENBQUM7WUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUMzQyxLQUFLLENBQUM7UUFDUixLQUFLLENBQUM7WUFDSixTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFDM0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO2dCQUM1QixLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO2dCQUM1QixLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUMsS0FBSyxDQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUN6RixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQVUsQ0FBQyxDQUFDO2dCQUNsRCxLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUMsS0FBSyxHQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQVUsQ0FBQyxDQUFDO2dCQUNsRCxLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUMsS0FBSyxHQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQVUsQ0FBQyxDQUFDO2dCQUNsRCxLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUMsS0FBSyxDQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUN6RixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQVUsQ0FBQyxDQUFDO2dCQUNsRCxLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUMsS0FBSyxHQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQVUsQ0FBQyxDQUFDO2dCQUNsRCxLQUFLLENBQUM7WUFDUixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFVLENBQUMsS0FBSyxHQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO2dCQUN4QyxJQUFJLENB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Q0FBQyxNQUFNLEdBQUcsQ0FBVSxDQUFDLENBQUM7Z0JBQ2hELEtBQUssQ0FBQztZQUNSLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBSSxDQUFDLE1BQU0sR0FBRyxHQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBVSxDQUFDLENBQUM7Z0JBQy9DLEtBQUssQ0FBQztZQUNSLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBSSxDQUFDLE1BQU0sR0FBRyxHQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBVSxDQUFDLENBQUM7Z0JBQy9DLEtBQUssQ0FBQztZQUNSLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JB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

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__ = __webpack_require__(2);
/* harmony export (immutable) */ __webpack_exports__["b"] = exec;


var semantics = {
    NOP: 0x00, MOVE: 0x10, SWAP: 0x11, LOAD: 0x20,
    STORE: 0x21, IN: 0x28, OUT: 0x29, MEMFILL: 0x2D,
    MEMCOPY: 0x2E, MEMSWAP: 0x2F, PUSH: 0x30, POP: 0x31,
    PUSHA: 0x32, POPA: 0x33,
    ADD: 0x40, INC: 0x41, SUB: 0x48, DEC: 0x49,
    CMP: 0x4F, IMUL: 0x50, IDIV: 0x51, IMOD: 0x52,
    SHL: 0x58, SHR: 0x59, ROL: 0x5A, ROR: 0x5B,
    XOR: 0x5C, AND: 0x5D, OR: 0x5E, NEG: 0x5F,
    SETFLAG: 0x60, CLRFLAG: 0x61,
    IFR: 0x64, IFNR: 0x65, SETR: 0x66, CLRR: 0x67,
    IFFLAG: 0x68, IFNFLAG: 0x69,
    BR: 0x70, CALL: 0x71, ENTER: 0x72, EXIT: 0x73,
    TRAP: 0x74, BYTESWAP: 0x78, RET: 0x7F, HALT: 0x80,
    LOOP: 0x7A,
    BADOP: 0xFF
};
var semanticAssemblyMap = {
    NOP: "nop", MOVE: "mov DR, SR", SWAP: "swap DR, SR", LOAD: "ldB DR, OP",
    STORE: "stB SR, OP", IN: "in SR, U8", OUT: "out SR, U8", MEMFILL: "mfill DbS : DR, SR * C",
    MEMCOPY: "mcopy DbS : DR, SbS : SR * C", MEMSWAP: "mswap DbS : DR, SbS : SR * C",
    PUSH: "push SR", POP: "pop DR",
    PUSHA: "pusha", POPA: "popa",
    ADD: "add DR, SR", INC: "inc SR", SUB: "sub DR, SR", DEC: "dec SR",
    CMP: "cmp DR, SR", IMUL: "mul OR : DR, SR", IDIV: "idiv OR : DR, SR", IMOD: "imod OR : DR, SR",
    SHL: "shl DR, SR", SHR: "shr DR, SR", ROL: "rol DR, SR", ROR: "ror DR, SR",
    XOR: "xor DR, SR", AND: "and DR, SR", OR: "or DR, SR", NEG: "neg DR",
    SETFLAG: "set F", CLRFLAG: "clr F",
    IFR: "ifr SR, U8", IFNR: "ifnr SR, U8", SETR: "setr SR, U8", CLRR: "clrr SR, U8",
    IFFLAG: "if F", IFNFLAG: "ifn F",
    BR: "br OP", CALL: "call OP", ENTER: "enter U8", EXIT: "exit U8",
    TRAP: "trap OP", BYTESWAP: "xcb SR", RET: "ret", HALT: "halt U8",
    LOOP: "loop LR, S8",
    BADOP: "???"
};
var semanticsMap = Object.keys(semantics).reduce(function (p, c) {
    p[semantics[c]] = c;
    return p;
}, {});
/**
 * Given a `cpu` state, return the assembly instruction that best matches
 *
 * @param {Cpu} cpu     the cpu with state to decode
 * @return {string}     the matching assembly statement
 */
function mapStateToAsm(cpu) {
    var asm = semanticAssemblyMap[semanticsMap[cpu.state.semantic]] || "";
    asm = asm.replace("B", ["s", "d"][cpu.state.whichBank]);
    asm = asm.replace("F", cpu.flagMap[cpu.state.flag]);
    asm = asm.replace("DbS", cpu.registerMap[cpu.state.destBank === 0 ? "SB" : "DB"]);
    asm = asm.replace("SbS", cpu.registerMap[cpu.state.destBank === 0 ? "SB" : "DB"]);
    asm = asm.replace("OR", cpu.registerMap[cpu.state.othRegister] || "BAD");
    asm = asm.replace("SR", cpu.registerMap[cpu.state.srcRegister] || "BAD");
    asm = asm.replace("LR", cpu.registerMap[cpu.state.srcRegister] || "BAD");
    asm = asm.replace("DR", cpu.registerMap[cpu.state.destRegister] || "BAD");
    asm = asm.replace("U8", __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex2(cpu.state.imm8));
    asm = asm.replace("S8", __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from8(cpu.state.imm8));
    if (asm.indexOf("OP") > -1) {
        // special handling
        switch (cpu.state.semantic) {
            case semantics.LOAD:
            case semantics.STORE:
            case semantics.BR:
            case semantics.CALL:
                {
                    asm = asm.replace(/\(L\)/g, cpu.state.scale === 0 ? "L" : "");
                    var relative = false;
                    var brackets = (cpu.state.addressingMode & 1) === 0 ? "[]" : "()";
                    var indexByX = cpu.state.indexByX ? "+X" : "";
                    var indexByY = cpu.state.indexByY ? "+Y" : "";
                    if (cpu.state.semantic === cpu.semantics.BR ||
                        cpu.state.semantic === cpu.semantics.CALL) {
                        relative = true;
                    }
                    switch (cpu.state.addressingMode) {
                        case 0:
                            asm = asm.replace("OP", relative ? __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from8(cpu.state.imm8) : __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex2(cpu.state.imm8));
                            break;
                        case 1:
                            asm = asm.replace("OP", relative ? __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from16(cpu.state.imm16) : __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex4(cpu.state.imm16));
                            break;
                        case 2:
                            asm = asm.replace("OP", brackets[0] + __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex4(cpu.state.imm16) + indexByX + indexByY + brackets[1]);
                            break;
                        case 3:
                            asm = asm.replace("OP", brackets[0] + __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex4(cpu.state.imm16) + indexByX + brackets[1] + indexByY);
                            break;
                        case 4:
                            asm = asm.replace("OP", brackets[0] + "BP+" + __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex4(cpu.state.imm16) + indexByX + indexByY + brackets[1]);
                            break;
                        case 5:
                            asm = asm.replace("OP", brackets[0] + "BP+" + __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex4(cpu.state.imm16) + indexByX + brackets[1] + indexByY);
                            break;
                        case 6:
                            asm = asm.replace("OP", brackets[0] + "D" + indexByX + indexByY + brackets[1]);
                            break;
                        case 7:
                            asm = asm.replace("OP", brackets[0] + "D" + indexByX + brackets[1] + indexByY);
                            break;
                        default:
                    }
                }
                break;
            case semantics.TRAP:
                asm = asm.replace("OP", (cpu.state.opcode === 0x03 ? "AL" : __WEBPACK_IMPORTED_MODULE_0__util_hexUtils_js__["a" /* default */].toHex2(cpu.state.imm8)));
                break;
            default:
        }
    }
    else {
        asm = asm.replace(/\(L\)/g, "");
    }
    return asm;
}
function addUpdatingFlags(cpu, a, b, size) {
    if (size === void 0) { size = 16; }
    var unsignedSize = (size === 16 ? 65536 : 256);
    var unsignedMax = unsignedSize - 1;
    var signedSize = (size === 16 ? 32768 : 128);
    var signedMax = signedSize - 1;
    var neg = (size === 16 ? 32768 : 128);
    // clear overflow and carry
    cpu.clrFlag(cpu.flagMap.V);
    cpu.clrFlag(cpu.flagMap.C);
    /*eslint-disable no-var, vars-on-top*/
    // Chrome deopts this because v is modified later ...
    var v = (a & unsignedMax) + (b & unsignedMax);
    /*eslint-enable no-var, vars-on-top*/
    // carry is easy -- use the MSB of the operation
    if (v > unsignedMax) {
        cpu.setFlag(cpu.flagMap.C);
    }
    // handle overflow
    if ((a & neg) === (b & neg)) {
        var opSigns = ((a & neg) | (b & neg)) ? 1 : 0;
        var resultSign = (v > signedMax) ? 1 : 0;
        if (opSigns !== resultSign) {
            cpu.setFlag(cpu.flagMap.V);
        }
    }
    v &= unsignedMax;
    return v;
}
function subtractUpdatingFlags(cpu, a, b, size) {
    if (size === void 0) { size = 16; }
    return addUpdatingFlags(cpu, a, (-b) & (size === 16 ? 0xFFFF : 0xFF), size);
}
/**
 * shifts a by b times in the direction specified by `dir`; rotation is determined
 * by mode
 *
 * @param {Cpu} cpu                 the cpu
 * @param {integer} a               value to shift
 * @param {integer} b               times to shift
 * @param {integer} [size]          size of value we're shifting
 * @param {integer} [dir]           direction; -1 is left, 1 is right
 * @param {integer} [mode]          mode; 0 = shift; 1 = rotate
 * @return {integer}                result
 */
function shiftUpdatingFlags(cpu, a, b, size, dir, mode) {
    if (size === void 0) { size = 16; }
    if (dir === void 0) { dir = -1; }
    if (mode === void 0) { mode = 0; }
    var msbmask = (size === 16) ? 0x8000 : 0x80;
    var maxint = (size === 16) ? 0xFFFF : 0xFF;
    var lsbmask = 0x01;
    /*eslint-disable no-var, vars-on-top*/
    var r = a;
    /*eslint-enable no-var, vars-on-top*/
    cpu.clrFlag(cpu.flagMap.V);
    cpu.clrFlag(cpu.flagMap.C);
    if (mode === 0 && b >= 16) {
        b = 16;
    }
    if (mode === 1) {
        b &= 0x0F;
    }
    for (var i = 0; i < b; i++) {
        var bitShiftingOut = r & ((dir < 0) ? msbmask : lsbmask);
        r = ((dir < 0) ? r << 1 : r >> 1) & maxint;
        if (mode > 0) {
            // rotating!
            if (bitShiftingOut > 0) {
                r |= (dir < 0) ? lsbmask : msbmask;
            }
        }
        else {
            // shifting; set carry if bit shifted out
            if (bitShiftingOut > 0) {
                cpu.setFlag(cpu.flagMap.C);
            }
        }
    }
    return r;
}
function handleFlags(cpu, v, size) {
    if (size === void 0) { size = 16; }
    var unsignedSize = (size === 16 ? 65536 : 256);
    var unsignedMax = unsignedSize - 1;
    var signedSize = (size === 16 ? 32768 : 128);
    var signedMax = signedSize - 1;
    // handle Zero flag
    (v !== 0) ? cpu.clrFlag(cpu.flagMap.Z) : cpu.setFlag(cpu.flagMap.Z);
    // handle Negative flag
    cpu.clrFlag(cpu.flagMap.N);
    if (v < 0) {
        v = (unsignedSize + v) & unsignedMax;
    }
    if (v > signedMax) {
        cpu.setFlag(cpu.flagMap.N);
    }
    return v & unsignedMax;
}
function getAddr(cpu, bankSelect) {
    /*eslint-disable no-var, vars-on-top*/
    var addr;
    /*eslint-enable no-var, vars-on-top*/
    var indirect = Boolean(cpu.state.addressingMode & 1);
    switch (cpu.state.addressingMode) {
        case 2:
        case 3:
            addr = cpu.state.imm16;
            break;
        case 4:
        case 5:
            addr = __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from16(cpu.state.imm16);
            addr = cpu.registers[cpu.registerMap.BP].U16 + addr;
            break;
        case 6:
        case 7:
            addr = cpu.registers[cpu.registerMap.D].U16;
            break;
        default:
    }
    // make sure bank is added in
    if ((cpu.state.addressingMode < 4) || (cpu.state.addressingMode > 5)) {
        // BP can only be from bank 0x00
        addr |= (cpu.registers[cpu.registerMap.SB + bankSelect].U2) << 16;
    }
    // index by X first, if we must
    if (cpu.state.indexByX) {
        addr += cpu.registers[cpu.registerMap.X].U16 << cpu.state.scale;
    }
    // indirect
    if (indirect) {
        addr = (addr & 0x30000) | cpu.memory.peek16(addr);
    }
    // index by Y if we must
    if (cpu.state.indexByY) {
        addr += cpu.registers[cpu.registerMap.Y].U16 << cpu.state.scale;
    }
    return addr;
}
var semanticsOps = (_a = {},
    _a[semantics.NOP] = function nop() { },
    _a[semantics.MOVE] = function move(cpu) { cpu.registers[cpu.state.destRegister].U16 = cpu.registers[cpu.state.srcRegister].U16; },
    _a[semantics.SWAP] = function swap(cpu) {
        _a = [cpu.registers[cpu.state.srcRegister].U16, cpu.registers[cpu.state.destRegister].U16], cpu.registers[cpu.state.destRegister].U16 = _a[0], cpu.registers[cpu.state.srcRegister].U16 = _a[1];
        var _a;
    },
    _a[semantics.LOAD] = function load(cpu) {
        var dreg = cpu.registers[cpu.state.destRegister];
        if (cpu.state.addressingMode === 0) {
            dreg.U8 = cpu.state.imm8;
        }
        else if (cpu.state.addressingMode === 1) {
            dreg.U16 = cpu.state.imm16;
        }
        else {
            if (cpu.state.scale) {
                dreg.U16 = handleFlags(cpu, cpu.memory.peek16(getAddr(cpu, cpu.state.whichBank)), 16);
            }
            else {
                dreg.U8 = handleFlags(cpu, cpu.memory.peek(getAddr(cpu, cpu.state.whichBank)), 8);
            }
        }
    },
    _a[semantics.STORE] = function store(cpu) {
        var sreg = cpu.registers[cpu.state.srcRegister];
        var addr;
        if (cpu.state.addressingMode < 2) {
            // can't store to immediate values
            return;
        }
        else {
            if (cpu.state.scale) {
                addr = getAddr(cpu, cpu.state.whichBank);
                //if ((addr & 0x3C000) !== 0xC000) {
                // avoid ROM
                cpu.memory.poke16(addr, sreg.U16);
            }
            else {
                addr = getAddr(cpu, cpu.state.whichBank);
                //if ((addr & 0x3C000) !== 0xC000) {
                // avoid ROM
                cpu.memory.poke(addr, sreg.U8);
            }
        }
    },
    _a[semantics.IN] = function _in(cpu) {
        var dreg = cpu.registers[cpu.state.destRegister];
        dreg.U8 = handleFlags(cpu, cpu.memory.peek(cpu.memory.layout.iobot + cpu.state.imm8));
        /* previous implementation used a separate IO
        if (!cpu.io) {
            cpu.setFlag(cpu.flagMap.E);
            cpu.registers[cpu.state.destRegister].U8 = handleFlags(cpu, 0x00, 8);
            return;
        }
        let data = cpu.io.read(cpu.state.imm8);
        if (data !== undefined) {
            cpu.clrFlag(cpu.flagMap.E);
        } else {
            data = 0x00;
            cpu.setFlag(cpu.flagMap.E);
        }
        cpu.registers[cpu.state.destRegister].U8 = handleFlags(cpu, data, 8);
        */
    },
    _a[semantics.OUT] = function _out(cpu) {
        var sreg = cpu.registers[cpu.state.srcRegister];
        cpu.memory.poke(cpu.memory.layout.iobot + cpu.state.imm8, sreg.U8);
        /* previous implementation used separate IO
        if (cpu.io) {
            cpu.io.write(cpu.state.imm8, cpu.registers[cpu.state.srcRegister].U8);
        }
        */
    },
    _a[semantics.MEMFILL] = function memfill(cpu) {
        var c = cpu.registers[cpu.registerMap.C].U16;
        var sr = cpu.registers[cpu.state.srcRegister].U8;
        var db = (cpu.registers[cpu.state.destBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var da = cpu.registers[cpu.state.destRegister].U16;
        var daddr = (db | da);
        cpu.memory.fillWithin({ value: sr, addr: daddr, len: c });
    },
    _a[semantics.MEMCOPY] = function memcopy(cpu) {
        var c = cpu.registers[cpu.registerMap.C].U16;
        var sb = (cpu.registers[cpu.state.srcBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var sa = cpu.registers[cpu.state.srcRegister].U16;
        var db = (cpu.registers[cpu.state.destBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var da = cpu.registers[cpu.state.destRegister].U16;
        var daddr = (db | da);
        var saddr = (sb | sa);
        cpu.memory.copyWithin({ src: saddr, dest: daddr, len: c });
    },
    _a[semantics.MEMSWAP] = function memswap(cpu) {
        var c = cpu.registers[cpu.registerMap.C].U16;
        var sb = (cpu.registers[cpu.state.srcBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var sa = cpu.registers[cpu.state.srcRegister].U16;
        var db = (cpu.registers[cpu.state.destBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var da = cpu.registers[cpu.state.destRegister].U16;
        var daddr = (db | da);
        var saddr = (sb | sa);
        var sbuf = cpu.memory.copyFromRange(saddr, c);
        var dbuf = cpu.memory.copyFromRange(daddr, c);
        cpu.memory.setWithin({ data: dbuf, addr: saddr });
        cpu.memory.setWithin({ data: sbuf, addr: daddr });
    },
    _a[semantics.PUSH] = function push(cpu) {
        var sreg = cpu.registers[cpu.state.srcRegister];
        if (!sreg) {
            return;
        }
        cpu.push(sreg);
    },
    _a[semantics.PUSHA] = function pusha(cpu) {
        var sreg;
        for (var i = 0; i < cpu.registers.length; i++) {
            sreg = cpu.registers[i];
            if (sreg && sreg.name !== "PC") {
                cpu.push(sreg);
            }
        }
    },
    _a[semantics.POP] = function pop(cpu) {
        var dreg = cpu.registers[cpu.state.destRegister];
        if (!dreg) {
            return;
        }
        cpu.pop(dreg);
    },
    _a[semantics.POPA] = function popa(cpu) {
        var sreg;
        for (var i = cpu.registers.length - 1; i >= 0; i--) {
            sreg = cpu.registers[i];
            if (sreg && sreg.name !== "PC") {
                cpu.pop(sreg);
            }
        }
    },
    _a[semantics.ADD] = function add(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, addUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16), 16);
    },
    _a[semantics.SUB] = function sub(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, subtractUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16), 16);
    },
    _a[semantics.INC] = function inc(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, addUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, 1, 16), 16);
    },
    _a[semantics.DEC] = function dec(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, subtractUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, 1, 16), 16);
    },
    _a[semantics.CMP] = function cmp(cpu) {
        // compare is just subraction without storing the result -- just flags!
        handleFlags(cpu, subtractUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16), 16);
    },
    _a[semantics.IMUL] = function imul(cpu) {
        var result = ((cpu.registers[cpu.state.othRegister].U16 << 16) | cpu.registers[cpu.state.destRegister].U16) * cpu.registers[cpu.state.srcRegister].U16;
        cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, result & 0x0000FFFF, 16);
        cpu.clrFlag(cpu.flagMap.C);
        cpu.clrFlag(cpu.flagMap.V);
        if (result > 65535) {
            cpu.registers[cpu.state.othRegister].U16 = (result & 0xFFFF0000) >> 16;
            cpu.setFlag(cpu.flagMap.C);
            cpu.setFlag(cpu.flagMap.V);
        }
    },
    _a[semantics.IDIV] = function idiv(cpu) {
        var _a = [(cpu.registers[cpu.state.othRegister].U16 << 16) | cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16], a = _a[0], b = _a[1];
        cpu.clrFlag(cpu.flagMap.E);
        if (b === 0) {
            cpu.setFlag(cpu.flagMap.E); // can't divide by zero!
        }
        else {
            var result = Math.floor(a / b);
            cpu.clrFlag(cpu.flagMap.C);
            cpu.clrFlag(cpu.flagMap.V);
            cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, result & 0x0000FFFF, 16);
            if (result > 65535) {
                cpu.registers[cpu.state.othRegister].U16 = (result & 0xFFFF0000) >> 16;
                cpu.setFlag(cpu.flagMap.C);
                cpu.setFlag(cpu.flagMap.V);
            }
        }
    },
    _a[semantics.IMOD] = function imod(cpu) {
        var _a = [(cpu.registers[cpu.state.othRegister].U16 << 16) | cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16], a = _a[0], b = _a[1];
        cpu.clrFlag(cpu.flagMap.E);
        if (b === 0) {
            cpu.setFlag(cpu.flagMap.E); // can't divide by zero!
        }
        else {
            var result = Math.floor(a % b);
            cpu.clrFlag(cpu.flagMap.C);
            cpu.clrFlag(cpu.flagMap.V);
            cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, result & 0x0000FFFF, 16);
            if (result > 65535) {
                cpu.registers[cpu.state.othRegister].U16 = (result & 0xFFFF0000) >> 16;
                cpu.setFlag(cpu.flagMap.C);
                cpu.setFlag(cpu.flagMap.V);
            }
        }
    },
    _a[semantics.SHL] = function shl(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, shiftUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16, -1, (cpu.getFlag(cpu.flagMap.M) ? 1 : 0)), 16);
    },
    _a[semantics.SHR] = function shr(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, shiftUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16, +1, (cpu.getFlag(cpu.flagMap.M) ? 1 : 0)), 16);
    },
    _a[semantics.ROL] = undefined,
    _a[semantics.ROR] = undefined,
    _a[semantics.AND] = function and(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, cpu.registers[cpu.state.destRegister].U16 & cpu.registers[cpu.state.srcRegister].U16, 16);
    },
    _a[semantics.OR] = function or(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, cpu.registers[cpu.state.destRegister].U16 | cpu.registers[cpu.state.srcRegister].U16, 16);
    },
    _a[semantics.XOR] = function xor(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, cpu.registers[cpu.state.destRegister].U16 ^ cpu.registers[cpu.state.srcRegister].U16, 16);
    },
    _a[semantics.NEG] = function neg(cpu) {
        // if M is set, 1's complement (NOT)
        cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, (cpu.getFlag(cpu.flagMap.M) ? 255 : 256) - cpu.registers[cpu.state.destRegister].U16);
    },
    _a[semantics.SETFLAG] = function setflag(cpu) { cpu.setFlag(cpu.state.flag); },
    _a[semantics.CLRFLAG] = function clrflag(cpu) { cpu.clrFlag(cpu.state.flag); },
    _a[semantics.IFFLAG] = function ifflag(cpu) { if (!cpu.getFlag(cpu.state.flag)) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.IFNFLAG] = function ifnflag(cpu) { if (cpu.getFlag(cpu.state.flag)) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.SETR] = function setr(cpu) { cpu.registers[cpu.state.srcRegister].U8 |= cpu.state.imm8; },
    _a[semantics.CLRR] = function clrr(cpu) { cpu.registers[cpu.state.srcRegister].U8 &= (0xFF - cpu.state.imm8); },
    _a[semantics.IFR] = function ifr(cpu) { if (!(((cpu.registers[cpu.state.srcRegister].U8 & cpu.state.imm8)) > 0)) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.IFNR] = function ifnr(cpu) { if (((cpu.registers[cpu.state.srcRegister].U8 & cpu.state.imm8)) > 0) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.BR] = function br(cpu) {
        var PC = cpu.registers[cpu.registerMap.PC];
        if (cpu.state.addressingMode === 0) {
            PC.U16 += __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from8(cpu.state.imm8);
        }
        else if (cpu.state.addressingMode === 1) {
            PC.U16 += __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from16(cpu.state.imm16);
        }
        else {
            PC.U16 = getAddr(cpu, cpu.state.whichBank) & 0xFFFF;
        }
    },
    _a[semantics.CALL] = function call(cpu) {
        cpu.push(cpu.registers[cpu.registerMap.PC]);
        semanticsOps[semantics.BR](cpu);
    },
    _a[semantics.LOOP] = function loop(cpu) {
        var reg = cpu.registers[cpu.state.srcRegister];
        reg.U16 = handleFlags(cpu, subtractUpdatingFlags(cpu, reg.U16, 1, 16), 16);
        if (cpu.getFlag(cpu.flagMap.C)) {
            var PC = cpu.registers[cpu.registerMap.PC];
            PC.U16 += __WEBPACK_IMPORTED_MODULE_1__util_twosComplement_js__["a" /* default */].from8(cpu.state.imm8);
        }
    },
    _a[semantics.TRAP] = function trap(cpu) {
        var PC = cpu.registers[cpu.registerMap.PC];
        var v, i;
        cpu.push(PC);
        if (cpu.state.opcode === 0x03) {
            // trap registers
            i = cpu.registers[cpu.registerMap.AL].U8;
        }
        else {
            i = cpu.state.imm8;
        }
        v = cpu.memory.peek16(i << 1); // get vector
        PC.U16 = v;
    },
    _a[semantics.RET] = function ret(cpu) {
        cpu.pop(cpu.registers[cpu.registerMap.PC]);
    },
    _a[semantics.BYTESWAP] = function byteswap(cpu) {
        var reg = cpu.registers[cpu.state.srcRegister];
        var hi = (reg.U16 & 0xFF00) >> 8;
        var lo = (reg.U16 & 0x00FF);
        reg.U16 = (lo << 8) | hi;
    },
    _a[semantics.ENTER] = function enter(cpu) {
        var BP = cpu.registers[cpu.registerMap.BP];
        var SP = cpu.registers[cpu.registerMap.SP];
        cpu.push(SP);
        cpu.push(BP);
        BP.U16 = SP.U16;
        SP.U16 -= cpu.state.imm8;
    },
    _a[semantics.EXIT] = function exit(cpu) {
        var BP = cpu.registers[cpu.registerMap.BP];
        var SP = cpu.registers[cpu.registerMap.SP];
        SP.U16 += cpu.state.imm8;
        cpu.pop(BP);
        cpu.pop(SP);
    },
    _a[semantics.HALT] = function halt(cpu) {
        cpu.pause(cpu.state.imm8);
    },
    _a);
// this expects to be bound to a cpu
function exec() {
    var op = semanticsOps[this.state.semantic];
    if (op) {
        op(this);
    }
    else {
        this.setFlag(this.flagMap.E);
        this.sendTrap(0xFE);
    }
}
/* harmony default export */ __webpack_exports__["a"] = {
    semantics: semantics,
    semanticsMap: semanticsMap,
    semanticAssemblyMap: semanticAssemblyMap,
    mapStateToAsm: mapStateToAsm
};
var _a;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtYW50aWNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VtYW50aWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sY0FBYyxNQUFNLDJCQUEyQixDQUFDO0FBRXZELElBQUksU0FBUyxHQUFHO0lBQ1osR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDN0MsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7SUFDL0MsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDbkQsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUN2QixHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUMxQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUM3QyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUMxQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJO0lBQzVCLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFF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QUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsRixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQ3pFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFDekUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQztJQUN6RSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQzFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6RCxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFHOUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsbUJBQW1CO1FBQ25CLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN6QixLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDcEIsS0FBSyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3JCLEtBQUssU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNsQixLQUFLLFNBQVMsQ0FBQyxJQUFJO2dCQUNmLENBQUM7b0JBQ0csR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQzlELElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztvQkFDckIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztvQkFDbEUsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFDOUMsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFDOUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFO3dCQUN2QyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQzVDLFFBQVEsR0FBRyxJQUFJLENBQUM7b0JBQ3BCLENBQUM7b0JBQ0QsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO3dCQUMvQixLQUFLLENBQUM7NEJBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7NEJBQUMsS0FBSyxDQUFDO3dCQUMxSCxLQUFLLENBQUM7NEJBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7NEJBQUMsS0FBSyxDQUFDO3dCQUM3SCxLQUFLLENBQUM7NEJBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFBQyxLQUFLLENBQUM7d0JBQzNILEtBQUssQ0FBQzs0QkFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxH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QzdDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0RyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ25ELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxHQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUcsaUJBQWlCLEdBQUc7UUFDckMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM3QyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDbEQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0RyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ25ELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXRCLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDRCxHQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUcsaUJBQWlCLEdBQUc7UUFDckMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM3QyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDbEQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0RyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ25ELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXRCLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFOUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQ0QsR0FBQyxTQUFTLENBQUMsSUFBSSxJQUFHLGNBQWMsR0FBRztRQUMvQixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFDRCxHQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUcsZUFBZSxHQUFHO1FBQ2pDLElBQUksSUFBSSxDQUFDO1FBQ1QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBQ0QsR0FBQyxTQUFTLENBQUMsR0FBRyxJQUFHLGFBQWEsR0FBRztRQUM3QixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFDRCxHQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUcsY0FBYyxHQUFHO1FBQy9CLElBQUksSUFBSSxDQUFDO1FBQ1QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNqRCxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUNELEdBQUMsU0FBUyxDQUFDLEdBQUcsSUFBRyxhQUFhLEdBQUc7UUFDN0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUc7WUFDckMsV0FBVyxDQUFDLEdBQUcsRUFDWCxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsRUFDM0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDakQsRUFBRSxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUNELEdBQUMsU0FBUyxDQUFDLEdBQUcsSUFBRyxhQUFhLEdBQUc7UUFDN0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUc7WUFDckMsV0FBVyxDQUFDLEdBQUcsRUFDWCxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsRUFDaEUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDakQsRUFBRSxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUNELEdBQUMsU0FBUyxDQUFDLEdBQUcsSUFBRyxhQUFhLEdBQUc7UUFDN0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUc7WUFDckMsV0FBVyxDQUFDLEdBQUcsRUFDWCxnQkFBZ0IsQ0FB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QWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUcsR0FBQyxTQUFTLENBQUMsR0FBRyxJQUFHLGFBQWEsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0ksR0FBQyxTQUFTLENBQUMsSUFBSSxJQUFHLGNBQWMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUksR0FBQyxTQUFTLENBQUMsRUFBRSxJQUFHLFlBQVksR0FBRztRQUMzQixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxF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U0FBUyxDQUFDLFFBQVEsSUFBRyxrQkFBa0IsR0FBRztRQUN2QyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUNELEdBQUMsU0FBUyxDQUFDLEtBQUssSUFBRyxlQUFlLEdBQUc7UUFDakMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNoQixFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFDRCxHQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUcsY0FBYyxHQUFHO1FBQy9CLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFM0MsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBQ0QsR0FBQyxTQUFTLENBQUMsSUFBSSxJQUFHLGNBQWMsR0FBRztRQUMvQixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztPQUNKLENBQUE7QUFFRCxvQ0FBb0M7QUFDcEMsTUFBTTtJQUNGLElBQUksRUFBRSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDTCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDYixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0FBQ0wsQ0FBQztBQUVELGVBQWU7SUFDWCxTQUFTLFdBQUE7SUFDVCxZQUFZLGNBQUE7SUFDWixtQkFBbUIscUJBQUE7SUFDbkIsYUFBYSxlQUFBO0NBQ2hCLENBQUMifQ==

/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Cpu_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Memory_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_memoryLayout_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_traps_js__ = __webpack_require__(6);
/* globals self, Atomics */




var CPUWorker = (function () {
    function CPUWorker() {
        this.cpu = new __WEBPACK_IMPORTED_MODULE_0__core_Cpu_js__["a" /* default */]();
        this.stats = {
            numInstructions: 0
        };
        this.tick = this.tick.bind(this);
    }
    CPUWorker.prototype.setSentinel = function (sentinel) {
        this.sentinel = new Uint8Array(sentinel);
    };
    CPUWorker.prototype.setSharedMemory = function (sharedArrayBuffer) {
        this.cpu.memory = new __WEBPACK_IMPORTED_MODULE_1__core_Memory_js__["a" /* default */](__WEBPACK_IMPORTED_MODULE_2__core_memoryLayout_js__["a" /* default */], { withSharedArrayBuffer: sharedArrayBuffer });
    };
    CPUWorker.prototype.setSharedIO = function () {
    };
    CPUWorker.prototype.init = function () {
        this.stats.numInstructions = 0;
        this.cpu.init();
    };
    CPUWorker.prototype.getStats = function (_, postMessage) {
        postMessage({
            cmd: "stats",
            data: this.stats
        });
    };
    CPUWorker.prototype.getStatus = function (_, postMessage) {
        postMessage({
            cmd: "status",
            data: {
                running: this.cpu.running,
                stepping: this.cpu.stepping,
                paused: this.cpu.paused
            }
        });
    };
    CPUWorker.prototype.getState = function (_, postMessage) {
        postMessage({
            cmd: "state",
            data: this.cpu.state
        });
    };
    CPUWorker.prototype.getRegisters = function (_, postMessage) {
        postMessage({
            cmd: "registers",
            data: this.cpu.registers.map(function (register) {
                if (register) {
                    return {
                        name: register.name,
                        size: register.size,
                        U8: register.U8,
                        U16: register.U16
                    };
                }
                else {
                    return undefined;
                }
            })
        });
    };
    CPUWorker.prototype.start = function () {
        this.cpu.stepping = false;
        if (this.cpu.running) {
            return;
        }
        this.cpu.running = true;
        this.tick();
    };
    CPUWorker.prototype.tick = function () {
        if (this.sentinel) {
            while (this.cpu.running && !this.cpu.paused) {
                this.cpu.step();
                this.stats.numInstructions++;
                if (Atomics.load(this.sentinel, 0) !== 0) {
                    Atomics.store(this.sentinel, 0);
                    //console.log("attention requested");
                    break;
                }
            }
        }
        else {
            var now = performance.now();
            var stopAt = now + 12;
            while (performance.now() < stopAt && (this.cpu.running && !this.cpu.paused)) {
                for (var i = 0; i < 100; i++) {
                    if (this.cpu.running && !this.cpu.paused) {
                        this.cpu.step();
                        this.stats.numInstructions++;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        if (this.cpu.running && !this.cpu.stepping) {
            setTimeout(this.tick, 0);
        }
    };
    CPUWorker.prototype.stop = function () {
        this.cpu.running = false;
    };
    CPUWorker.prototype.step = function () {
        this.cpu.stepping = true;
        this.cpu.step();
        this.stats.numInstructions++;
        this.cpu.stepping = false;
        this.cpu.running = false;
    };
    CPUWorker.prototype.trap = function (trap) {
        this.cpu.sendTrap(trap);
    };
    CPUWorker.prototype.hardReset = function () {
        this.init();
    };
    CPUWorker.prototype.softReset = function () {
        this.cpu.sendTrap(__WEBPACK_IMPORTED_MODULE_3__core_traps_js__["a" /* default */].RESET);
    };
    return CPUWorker;
}());
var cpuWorker = new CPUWorker();
self.addEventListener("message", function (e) {
    //console.log(e);
    var cmd = e.data.cmd;
    var data = e.data.data;
    if (cpuWorker[cmd]) {
        cpuWorker[cmd](data, self.postMessage);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3B1V29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ3B1V29ya2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQjtBQUMzQixPQUFPLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqQyxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQztBQUV2QyxPQUFPLFlBQVksTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEtBQUssTUFBTSxrQkFBa0IsQ0FBQztBQUVyQztJQUNJO1FBQ0ksSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxlQUFlLEVBQUUsQ0FBQztTQUNyQixDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLFFBQVE7UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsbUNBQWUsR0FBZixVQUFnQixpQkFBaUI7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRCwrQkFBVyxHQUFYO0lBQ0EsQ0FBQztJQUVELHdCQUFJLEdBQUo7UUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsNEJBQVEsR0FBUixVQUFTLENBQUMsRUFBRSxXQUFXO1FBQ25CLFdBQVcsQ0FBQztZQUNSLEdBQUcsRUFBRSxPQUFPO1lBQ1osSUFBSSxFQUFFLElB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

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
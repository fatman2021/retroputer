/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 32);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    toHex: function (v, format, prefix) {
        if (format === void 0) { format = "0000"; }
        if (prefix === void 0) { prefix = "0x"; }
        var hexValue = (v === undefined ? "0" : v).toString(16);
        hexValue = format.substr(0, format.length - hexValue.length) + hexValue;
        return "" + prefix + hexValue;
    },
    toHex2: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "00", prefix);
    },
    toHex4: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "0000", prefix);
    },
    toHex5: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "00000", prefix);
    },
    toHex8: function (v, prefix) {
        if (prefix === void 0) { prefix = "0x"; }
        return this.toHex(v, "00000000", prefix);
    },
    byteArrayToHex: function (arr, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = ""; }
        return arr.map(function (b) { return _this.toHex2(b, prefix); }).join(" ");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJoZXhVdGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtCQUFlO0lBQ1gsS0FBSyxZQUFDLENBQUMsRUFBRSxNQUFlLEVBQUUsTUFBYTtRQUE5Qix1QkFBQSxFQUFBLGVBQWU7UUFBRSx1QkFBQSxFQUFBLGFBQWE7UUFDbkMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssU0FBUyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEQsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUN4RSxNQUFNLENBQUMsS0FBRyxNQUFNLEdBQUcsUUFBVSxDQUFDO0lBQ2xDLENBQUM7SUFDRCxNQUFNLFlBQUMsQ0FBQyxFQUFFLE1BQWE7UUFBYix1QkFBQSxFQUFBLGFBQWE7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0QsTUFBTSxZQUFDLENBQUMsRUFBRSxNQUFhO1FBQWIsdUJBQUEsRUFBQSxhQUFhO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNELE1BQU0sWUFBQyxDQUFDLEVBQUUsTUFBYTtRQUFiLHVCQUFBLEVBQUEsYUFBYTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRCxNQUFNLFlBQUMsQ0FBQyxFQUFFLE1BQWE7UUFBYix1QkFBQSxFQUFBLGFBQWE7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsY0FBYyxZQUFDLEdBQUcsRUFBRSxNQUFXO1FBQS9CLGlCQUVDO1FBRm1CLHVCQUFBLEVBQUEsV0FBVztRQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDSixDQUFDIn0=

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var _log = [];
/**
 * log information to the console -- works for the browser or in a node environment
 *
 * @param {Array} args      data to log
 * @return {void}
 */
function log() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof window !== "undefined") {
        _log.unshift(args.join(" "));
        if (_log.length > 24) {
            _log.pop();
        }
        document.getElementById("log").textContent = _log.join(String.fromCharCode(13) + String.fromCharCode(10));
    }
    else {
        console.log(args.join(" "));
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = log;
if (typeof window !== "undefined") {
    window.log = log;
}
if (typeof global !== "undefined") {
    global.log = log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFFZDs7Ozs7R0FLRztBQUNIO0lBQTRCLGNBQU87U0FBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1FBQVAseUJBQU87O0lBQy9CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNYLENBQUM7UUFDRCxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7QUFDTCxDQUFDOztBQVZELHNCQVVDO0FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNyQixDQUFDO0FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNyQixDQUFDIn0=
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    from8: function (n) {
        return -(n & 0x80) + (n & 0x7F);
    },
    from16: function (n) {
        return -(n & 0x8000) + (n & 0x7FFF);
    },
    to8: function (n) {
        return n & 0xFF;
    },
    to16: function (n) {
        return n & 0xFFFF;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdvc0NvbXBsZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0d29zQ29tcGxlbWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtCQUFlO0lBQ1gsS0FBSyxZQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsTUFBTSxZQUFDLENBQUM7UUFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsR0FBRyxZQUFDLENBQUM7UUFDRCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxZQUFDLENBQUM7UUFDRixNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUN0QixDQUFDO0NBQ0osQ0FBQSJ9

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* globals SharedArrayBuffer */

var log_js_1 = __webpack_require__(1);
var hexUtils_js_1 = __webpack_require__(0);
var Memory = (function () {
    function Memory(layout, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.shared, shared = _c === void 0 ? false : _c, _d = _b.withSharedArrayBuffer, withSharedArrayBuffer = _d === void 0 ? undefined : _d;
        this._protected = false;
        this._shared = Boolean(shared || withSharedArrayBuffer);
        this.layout = layout;
        this._buf = withSharedArrayBuffer || new (shared ? SharedArrayBuffer : ArrayBuffer)(layout.size * 1024);
        this._mem = new Uint8Array(this._buf);
        this._rom = new Uint8Array(this._buf, layout.romStart, layout.romLength);
        this.resetStats();
    }
    Object.defineProperty(Memory.prototype, "shared", {
        get: function () {
            return this._shared;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Memory.prototype, "sharedArrayBuffer", {
        get: function () {
            return this.shared ? this._buf : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Memory.prototype, "protected", {
        get: function () {
            return this._protected;
        },
        set: function (v) {
            this._protected = v;
            if (v) {
                this._rom = this.copyFromRange(this.layout.romStart, this.layout.romLength);
            }
        },
        enumerable: true,
        configurable: true
    });
    Memory.prototype.resetStats = function () {
        this.stats = {
            readsTotal: 0,
            byteReadsTotal: 0,
            wordReadsTotal: 0,
            writesTotal: 0,
            byteWritesTotal: 0,
            wordWritesTotal: 0,
            lastReadAddr: 0,
            lastWriteAddr: 0,
            lastValueRead: 0,
            lastValueWritten: 0,
        };
    };
    Memory.prototype.dump = function () {
        log_js_1.default("mem stats | reads  8: " + this.stats.byteReadsTotal + "  16: " + this.stats.wordReadsTotal + "  All: " + this.stats.readsTotal);
        log_js_1.default("mem stats | writes 8: " + this.stats.byteWritesTotal + "  16: " + this.stats.wordWritesTotal + "  All: " + this.stats.writesTotal);
        log_js_1.default("mem stats | last read: " + hexUtils_js_1.default.toHex4(this.stats.lastValueRead) + "@" + hexUtils_js_1.default.toHex4(this.stats.lastReadAddr) + "  write: " + hexUtils_js_1.default.toHex4(this.stats.lastValueWritten) + "@" + hexUtils_js_1.default.toHex4(this.stats.lastWriteAddr));
    };
    Memory.prototype.loadFromJS = function (data, addrOverride) {
        var _this = this;
        var addr = data.addr;
        if (addrOverride) {
            addr = addrOverride;
        }
        data.data.forEach(function (v, i) {
            _this.poke(i + addr, v);
        });
    };
    /*
      loadFromBIN(bin) {
        // TODO
      }
    */
    Memory.prototype.poke = function (addr, val) {
        addr &= 0x3FFFF;
        var v = (val & 0xFF);
        this._mem[addr] = v;
        /*
        this.stats.lastValueWritten = v;
        this.stats.writesTotal++;
        this.stats.byteWritesTotal++;
        this.stats.lastValueWritten = (val & 0xFF);
        this.stats.lastWriteAddr = addr;
        */
    };
    Memory.prototype.poke16 = function (addr, val) {
        addr &= 0x3FFFF;
        var v = (val & 0xFFFF);
        this._mem[addr] = (v & 0xFF00) >> 8;
        this._mem[addr + 1] = (v & 0x00FF);
        /*
        this.stats.writesTotal++;
        this.stats.wordWritesTotal++;
        this.stats.lastValueWritten = v;
        this.stats.lastWriteAddr = addr;
        */
    };
    Memory.prototype.poke32 = function (addr, val) {
        addr &= 0x3FFFF;
        var v = (val & 0xFFFFFFFF);
        this._mem[addr] = (v & 0xFF000000) >> 24;
        this._mem[addr + 1] = (v & 0x00FF0000) >> 16;
        this._mem[addr + 2] = (v & 0x0000FF00) >> 8;
        this._mem[addr + 3] = (v & 0x000000FF);
        /*
        this.stats.writesTotal++;
        this.stats.lastValueWritten = v;
        this.stats.lastWriteAddr = addr;
        */
    };
    Memory.prototype.peek = function (addr) {
        addr &= 0x3FFFF;
        var v = this._mem[addr];
        if (this._protected) {
            if (addr >= this.layout.romStart && addr <= this.layout.romEnd) {
                v = this._rom[addr - this.layout.romStart];
            }
        }
        /*
        this.stats.readsTotal++;
        this.stats.byteReadsTotal++;
        this.stats.lastValueRead = v;
        this.stats.lastReadAddr = addr;
        */
        return v;
    };
    Memory.prototype.peek16 = function (addr) {
        addr &= 0x3FFFF;
        var v = (this.peek(addr) << 8) | this.peek(addr + 1);
        /*
        this.stats.readsTotal++;
        this.stats.wordReadsTotal++;
        this.stats.lastValueRead = v;
        this.stats.lastReadAddr = addr;
        */
        return v;
    };
    Memory.prototype.peek32 = function (addr) {
        addr &= 0x3FFFF;
        var v = (this.peek(addr) << 24) | (this.peek(addr + 1) << 16) | (this.peek(addr + 2) << 8) | (this.peek(addr + 3));
        /*
        this.stats.readsTotal++;
        this.stats.wordReadsTotal++;
        this.stats.lastValueRead = v;
        this.stats.lastReadAddr = addr;
        */
        return v;
    };
    Memory.prototype.range = function (addr, len) {
        if (addr + len <= this.layout.memtop) {
            return new Uint8Array(this._buf, addr, len);
        }
        else {
            var overflow = (addr + len) - this.layout.memtop;
            len -= overflow;
            if (len < 0) {
                len = 0;
            }
            return new Uint8Array(this._buf, addr, len); //.concat(this.copyFromRange(0, overflow));
        }
    };
    Memory.prototype.copyFromRange = function (addr, len) {
        return Uint8Array.from(this.range(addr, len));
    };
    Memory.prototype.copyWithin = function (_a) {
        var _b = _a === void 0 ? {} : _a, src = _b.src, dest = _b.dest, len = _b.len;
        if (src + len > this.layout.memtop ||
            dest + len > this.layout.memtop) {
            return;
        }
        this._mem.copyWithin(dest, src, src + len);
    };
    Memory.prototype.fillWithin = function (_a) {
        var _b = _a === void 0 ? {} : _a, value = _b.value, addr = _b.addr, len = _b.len;
        if (len + addr > this.layout.memtop) {
            return;
        }
        this._mem.fill(value & 0xFF, addr, addr + len);
    };
    Memory.prototype.setWithin = function (_a) {
        var _b = _a === void 0 ? {} : _a, data = _b.data, addr = _b.addr;
        if (addr + (data.length) > this.layout.memtop) {
            return;
        }
        this._mem.set(data, addr);
    };
    Memory.prototype.range32 = function (addr, len) {
        return new Uint32Array(this._buf, addr, len);
    };
    Memory.prototype.init = function () {
        var _this = this;
        this.protected = false;
        for (var i = 0; i < (this.layout.size * 1024); i++) {
            // simulate old-style memory being random at boot
            //this.poke(i, Math.floor(Math.random() * 256));
            this.poke(i, 0);
        }
        // we need three RETs at known important vectors
        [0x0FE00, 0x0FF00, 0x0FFFF].forEach(function (addr) {
            _this.poke(addr, 0xFF);
        });
        // All trap vectors initially point at 0xFFFF
        for (var addr = 0; addr < 512; addr++) {
            this.poke(addr, 0xFF);
        }
        // but we do need a valid FRAME and RESET vector
        this.poke16(0x00000, 0xFF00);
        this.poke16(0x001E0, 0xFE00);
        // loading boot ROM is the responsibility of our owner.
    };
    return Memory;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Memory;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable */
exports.memoryLayout = {
    size: 256,
    memlen: 0x40000,
    memtop: 0x3FFFF,
    iolen: 256,
    iotop: 0x3FFFF,
    ioComm3DataIn: 0x3FF4F,
    ioComm3DataOut: 0x3FF4E,
    ioComm3Command: 0x3FF4D,
    ioComm3Configuration: 0x3FF4C,
    ioComm2DataIn: 0x3FF4B,
    ioComm2DataOut: 0x3FF4A,
    ioComm2Command: 0x3FF49,
    ioComm2Configuration: 0x3FF48,
    ioComm1DataIn: 0x3FF47,
    ioComm1DataOut: 0x3FF46,
    ioComm1Command: 0x3FF45,
    ioComm1Configuration: 0x3FF44,
    ioComm0DataIn: 0x3FF43,
    ioComm0DataOut: 0x3FF42,
    ioComm0Command: 0x3FF41,
    ioComm0Configuration: 0x3FF40 // b0 = opened; b1 = cmd sent; b2 = cmd ack; b3 = data out sent; b4 = data out ack; b5 = data in sent; b6 = data in ack
    ,
    ioRandomHigh: 0x3FF39,
    ioRandomLow: 0x3FF38,
    ioClockHours: 0x3FF33,
    ioClockMinutes: 0x3FF32,
    ioClockSeconds: 0x3FF31,
    ioClockHundredths: 0x3FF30,
    ioTimer3HighCurrent: 0x3FF2C,
    ioTimer3LowCurrent: 0x3FF2B,
    ioTimer3HighReset: 0x3FF2A,
    ioTimer3LowReset: 0x3FF29,
    ioTimer3Configuration: 0x3FF28,
    ioTimer2HighCurrent: 0x3FF24,
    ioTimer2LowCurrent: 0x3FF23,
    ioTimer2HighReset: 0x3FF22,
    ioTimer2LowReset: 0x3FF21,
    ioTimer2Configuration: 0x3FF20,
    ioTimer1HighCurrent: 0x3FF1C,
    ioTimer1LowCurrent: 0x3FF1B,
    ioTimer1HighReset: 0x3FF1A,
    ioTimer1LowReset: 0x3FF19,
    ioTimer1Configuration: 0x3FF18,
    ioTimer0HighCurrent: 0x3FF14,
    ioTimer0LowCurrent: 0x3FF13,
    ioTimer0HighReset: 0x3FF12,
    ioTimer0LowReset: 0x3FF11,
    ioTimer0Configuration: 0x3FF10 // b0 = enabled; b1: 0 = one-shot, 1 = continuous; b2: 0 = no interrupt, 1 = trigger interrupt; b7 = triggered (manual reset)
    ,
    ioKeyboardDirections: 0x3FF02,
    ioKeyboardModifiers: 0x3FF01,
    ioKeyboardKeyPressed: 0x3FF00,
    iobot: 0x3FF00,
    spriteCount: 16,
    spriteFHeight: 0x340AF,
    spriteEHeight: 0x340AE,
    spriteDHeight: 0x340AD,
    spriteCHeight: 0x340AC,
    spriteBHeight: 0x340AB,
    spriteAHeight: 0x340AA,
    sprite9Height: 0x340A9,
    sprite8Height: 0x340A8,
    sprite7Height: 0x340A7,
    sprite6Height: 0x340A6,
    sprite5Height: 0x340A5,
    sprite4Height: 0x340A4,
    sprite3Height: 0x340A3,
    sprite2Height: 0x340A2,
    sprite1Height: 0x340A1,
    sprite0Height: 0x340A0,
    spriteFWidth: 0x3409F,
    spriteEWidth: 0x3409E,
    spriteDWidth: 0x3409D,
    spriteCWidth: 0x3409C,
    spriteBWidth: 0x3409B,
    spriteAWidth: 0x3409A,
    sprite9Width: 0x34099,
    sprite8Width: 0x34098,
    sprite7Width: 0x34097,
    sprite6Width: 0x34096,
    sprite5Width: 0x34095,
    sprite4Width: 0x34094,
    sprite3Width: 0x34093,
    sprite2Width: 0x34092,
    sprite1Width: 0x34091,
    sprite0Width: 0x34090,
    spriteFTile: 0x3408F,
    spriteETile: 0x3408E,
    spriteDTile: 0x3408D,
    spriteCTile: 0x3408C,
    spriteBTile: 0x3408B,
    spriteATile: 0x3408A,
    sprite9Tile: 0x34089,
    sprite8Tile: 0x34088,
    sprite7Tile: 0x34087,
    sprite6Tile: 0x34086,
    sprite5Tile: 0x34085,
    sprite4Tile: 0x34084,
    sprite3Tile: 0x34083,
    sprite2Tile: 0x34082,
    sprite1Tile: 0x34081,
    sprite0Tile: 0x34080,
    spriteFTileSet: 0x3407F,
    spriteETileSet: 0x3407E,
    spriteDTileSet: 0x3407D,
    spriteCTileSet: 0x3407C,
    spriteBTileSet: 0x3407B,
    spriteATileSet: 0x3407A,
    sprite9TileSet: 0x34079,
    sprite8TileSet: 0x34078,
    sprite7TileSet: 0x34077,
    sprite6TileSet: 0x34076,
    sprite5TileSet: 0x34075,
    sprite4TileSet: 0x34074,
    sprite3TileSet: 0x34073,
    sprite2TileSet: 0x34072,
    sprite1TileSet: 0x34071,
    sprite0TileSet: 0x34070,
    spriteFFGColor: 0x3406F,
    spriteEFGColor: 0x3406E,
    spriteDFGColor: 0x3406D,
    spriteCFGColor: 0x3406C,
    spriteBFGColor: 0x3406B,
    spriteAFGColor: 0x3406A,
    sprite9FGColor: 0x34069,
    sprite8FGColor: 0x34068,
    sprite7FGColor: 0x34067,
    sprite6FGColor: 0x34066,
    sprite5FGColor: 0x34065,
    sprite4FGColor: 0x34064,
    sprite3FGColor: 0x34063,
    sprite2FGColor: 0x34062,
    sprite1FGColor: 0x34061,
    sprite0FGColor: 0x34060,
    spriteFBGColor: 0x3405F,
    spriteEBGColor: 0x3405E,
    spriteDBGColor: 0x3405D,
    spriteCBGColor: 0x3405C,
    spriteBBGColor: 0x3405B,
    spriteABGColor: 0x3405A,
    sprite9BGColor: 0x34059,
    sprite8BGColor: 0x34058,
    sprite7BGColor: 0x34057,
    sprite6BGColor: 0x34056,
    sprite5BGColor: 0x34055,
    sprite4BGColor: 0x34054,
    sprite3BGColor: 0x34053,
    sprite2BGColor: 0x34052,
    sprite1BGColor: 0x34051,
    sprite0BGColor: 0x34050,
    spriteFScale: 0x3404F,
    spriteEScale: 0x3404E,
    spriteDScale: 0x3404D,
    spriteCScale: 0x3404C,
    spriteBScale: 0x3404B,
    spriteAScale: 0x3404A,
    sprite9Scale: 0x34049,
    sprite8Scale: 0x34048,
    sprite7Scale: 0x34047,
    sprite6Scale: 0x34046,
    sprite5Scale: 0x34045,
    sprite4Scale: 0x34044,
    sprite3Scale: 0x34043,
    sprite2Scale: 0x34042,
    sprite1Scale: 0x34041,
    sprite0Scale: 0x34040,
    spriteFYPosition: 0x3403F,
    spriteEYPosition: 0x3403E,
    spriteDYPosition: 0x3403D,
    spriteCYPosition: 0x3403C,
    spriteBYPosition: 0x3403B,
    spriteAYPosition: 0x3403A,
    sprite9YPosition: 0x34039,
    sprite8YPosition: 0x34038,
    sprite7YPosition: 0x34037,
    sprite6YPosition: 0x34036,
    sprite5YPosition: 0x34035,
    sprite4YPosition: 0x34034,
    sprite3YPosition: 0x34033,
    sprite2YPosition: 0x34032,
    sprite1YPosition: 0x34031,
    sprite0YPosition: 0x34030,
    spriteFXPosition: 0x3401F,
    spriteEXPosition: 0x3401E,
    spriteDXPosition: 0x3401D,
    spriteCXPosition: 0x3401C,
    spriteBXPosition: 0x3401B,
    spriteAXPosition: 0x3401A,
    sprite9XPosition: 0x34019,
    sprite8XPosition: 0x34018,
    sprite7XPosition: 0x34017,
    sprite6XPosition: 0x34016,
    sprite5XPosition: 0x34015,
    sprite4XPosition: 0x34014,
    sprite3XPosition: 0x34013,
    sprite2XPosition: 0x34012,
    sprite1XPosition: 0x34011,
    sprite0XPosition: 0x34010,
    spriteFLayer: 0x3400F,
    spriteELayer: 0x3400E,
    spriteDLayer: 0x3400D,
    spriteCLayer: 0x3400C,
    spriteBLayer: 0x3400B,
    spriteALayer: 0x3400A,
    sprite9Layer: 0x34009,
    sprite8Layer: 0x34008,
    sprite7Layer: 0x34007,
    sprite6Layer: 0x34006,
    sprite5Layer: 0x34005,
    sprite4Layer: 0x34004,
    sprite3Layer: 0x34003,
    sprite2Layer: 0x34002,
    sprite1Layer: 0x34001,
    sprite0Layer: 0x34000,
    spriteStart: 0x34000,
    tilePagesLength: 0x04000,
    tilePageLength: 0x01000,
    tilePage3Layer: 0x33FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage3OffsetY: 0x33FFE // signed Y offset for smooth scrolling
    ,
    tilePage3OffsetX: 0x33FFD // signed X offset for smooth scrolling
    ,
    tilePage3Set: 0x33FFC // 0 - 3, which tileset to use
    ,
    tilePage3Scale: 0x33FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage3CropY: 0x33FFA // height of area to ignore when compositing (border)
    ,
    tilePage3CropX: 0x33FF9 // width of area to ignore when compositing (border)
    ,
    tilePage3FGColor: 0x33800,
    tilePage3BGColor: 0x33400,
    tilePage3: 0x33000,
    tilePage2Layer: 0x32FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage2OffsetY: 0x32FFE // signed Y offset for smooth scrolling
    ,
    tilePage2OffsetX: 0x32FFD // signed X offset for smooth scrolling
    ,
    tilePage2Set: 0x32FFC // 0 - 3, which tileset to use
    ,
    tilePage2Scale: 0x32FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage2CropY: 0x32FFA // height of area to ignore when compositing (border)
    ,
    tilePage2CropX: 0x32FF9 // width of area to ignore when compositing (border)
    ,
    tilePage2FGColor: 0x32800,
    tilePage2BGColor: 0x32400,
    tilePage2: 0x32000,
    tilePage1Layer: 0x31FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage1OffsetY: 0x31FFE // signed Y offset for smooth scrolling
    ,
    tilePage1OffsetX: 0x31FFD // signed X offset for smooth scrolling
    ,
    tilePage1Set: 0x31FFC // 0 - 3, which tileset to use
    ,
    tilePage1Scale: 0x31FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage1CropY: 0x31FFA // height of area to ignore when compositing (border)
    ,
    tilePage1CropX: 0x31FF9 // width of area to ignore when compositing (border)
    ,
    tilePage1FGColor: 0x31800,
    tilePage1BGColor: 0x31400,
    tilePage1: 0x31000,
    tilePage0Layer: 0x30FFF // 0 - 7 = visible at layer, 0xFF/-1 = not visible
    ,
    tilePage0OffsetY: 0x30FFE // signed Y offset for smooth scrolling
    ,
    tilePage0OffsetX: 0x30FFD // signed X offset for smooth scrolling
    ,
    tilePage0Set: 0x30FFC // 0 - 3, which tileset to use
    ,
    tilePage0Scale: 0x30FFB // 0 = 1x1 pixel, 1 = 2x2 pixel
    ,
    tilePage0CropY: 0x30FFA // height of area to ignore when compositing (border)
    ,
    tilePage0CropX: 0x30FF9 // width of area to ignore when compositing (border)
    ,
    tilePage0FGColor: 0x30800,
    tilePage0BGColor: 0x30400,
    tilePage0: 0x30000,
    tilePagesStart: 0x30000,
    tileSetsLength: 65536,
    tileSetLength: 16384,
    tileSet3: 0x2C000 // tileset 3
    ,
    tileSet2: 0x28000 // tileset 2
    ,
    tileSet1: 0x24000 // tileset 1
    ,
    tileSet0: 0x20000 // 16K 256 8x8 tileset 0
    ,
    tileSetsStart: 0x20000,
    paletteLength: 1024,
    paletteLength32: 256,
    paletteStart: 0x1FC00 // 256 x 4 bytes
    ,
    backgroundColor: 0x1FA0B // background color for screen
    ,
    borderSizeY: 0x1FA06 // height of vertical border in px
    ,
    borderSizeX: 0x1FA05 // width of horizontal border in px
    ,
    borderColor: 0x1FA04 // Border Color
    ,
    graphicsLayer: 0x1FA02 // 0 - 7, graphica layer; FF = no display
    ,
    screenConfigLength: 256,
    screenConfigStart: 0x1FA00,
    graphicsLength: 64000,
    graphicsStart: 0x10000 // 320 x 200 (64000) bytes
    ,
    romLength: 0x04000 // length of rom
    ,
    romEnd: 0x0FFFF // End of ROM
    ,
    romStart: 0x0C000 // Start of ROM
    ,
    romScratchStart: 0x0B000 // ROM scratch area
    ,
    codeStart: 0x01000 // Start of code execution
    ,
    stackTop: 0x00FFF // top of stack (grows down)
    ,
    stackMax: 0x00400 // bottom of stack
    ,
    trapReset: 0x00000 // jump to instruction when reset
    ,
    traps: 0x00000 // 256 2-byte long pointers; ends 0x001FF
    ,
    membot: 0x00000
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.memoryLayout;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5TGF5b3V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVtb3J5TGF5b3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDVCxRQUFBLFlBQVksR0FBRztJQUN4QixJQUFJLEVBQUUsR0FBRztJQUNQLE1BQU0sRUFBRSxPQUFPO0lBQ2YsTUFBTSxFQUFFLE9BQU87SUFDZixLQUFLLEVBQUUsR0FBRztJQUNWLEtBQUssRUFBRSxPQUFPO0lBQ2QsYUFBYSxFQUFFLE9BQU87SUFDdEIsY0FBYyxFQUFFLE9BQU87SUFDdkIsY0FBYyxFQUFFLE9BQU87SUFDdkIsb0JBQW9CLEVBQUUsT0FBTztJQUM3QixhQUFhLEVBQUUsT0FBTztJQUN0QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixvQkFBb0IsRUFBRSxPQUFPO0lBQzdCLGFBQWEsRUFBRSxPQUFPO0lBQ3RCLGNBQWMsRUFBRSxPQUFPO0lBQ3ZCLGNBQWMsRUFBRSxPQUFPO0lBQ3ZCLG9CQUFvQixFQUFFLE9BQU87SUFDN0IsYUFBYSxFQUFFLE9BQU87SUFDdEIsY0FBYyxFQUFFLE9BQU87SUFDdkIsY0FBYyxFQUFFLE9BQU87SUFDdkIsb0JBQW9CLEVBQUUsT0FBTyxDQUFFLHVIQUF1SDs7SUFDdEosWUFBWSxFQUFFLE9BQU87SUFDckIsV0FBVyxFQUFFLE9BQU87SUFDcEIsWUFBWSxFQUFFLE9BQU87SUFDckIsY0FBYyxFQUFFLE9BQU87SUFDdkIsY0FBYyxFQUFFLE9BQU87SUFDdkIsaUJBQWlCLEVBQUUsT0FBTztJQUMxQixtQkFBbUIsRUFBRSxPQUFPO0lBQzVCLGtCQUFrQixFQUFFLE9BQU87SUFDM0IsaUJBQWlCLEVBQUUsT0FBTztJQUMxQixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLHFCQUFxQixFQUFFLE9BQU87SUFDOUIsbUJBQW1CLEVBQUUsT0FBTztJQUM1QixrQkFBa0IsRUFBRSxPQUFPO0lBQzNCLGlCQUFpQixFQUFFLE9BQU87SUFDMUIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixxQkFBcUIsRUFBRSxPQUFPO0lBQzlCLG1CQUFtQixFQUFFLE9BQU87SUFDNUIsa0JBQWtCLEVBQUUsT0FBTztJQUMzQixpQkFBaUIsRUFBRSxPQUFPO0lBQzFCLGdCQUFnQixFQUFFLE9BQU87SUFDekIscUJBQXFCLEVBQUUsT0FBTztJQUM5QixtQkFBbUIsRUFBRSxPQUFPO0lBQzVCLGtCQUFrQixFQUFFLE9BQU87SUFDM0IsaUJBQWlCLEVBQUUsT0FBTztJQUMxQixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLHFCQUFxQixFQUFFLE9BQU8sQ0FBRSw2SEFBNkg7O0lBQzdKLG9CQUFvQixFQUFFLE9BQU87SUFDN0IsbUJBQW1CLEVBQUUsT0FBTztJQUM1QixvQkFBb0IsRUFBRSxPQUFPO0lBQzdCLEtBQUssRUFBRSxPQUFPO0lBQ2QsV0FBVyxFQUFFLEVBQUU7SUFDZixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixhQUFhLEVBQUUsT0FBTztJQUN0QixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixXQUFXLEVBQUUsT0FBTztJQUNwQixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixjQUFjLEVBQUUsT0FBTztJQUN2QixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixZQUFZLEVBQUUsT0FBTztJQUNyQixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixnQkFBZ0IsRUFBRSxPQUFPO0lBQ3pCLGdCQUFnQixFQUFFLE9BQU87SUFDekIsWUFBWSxFQUFFLE9BQU87SUFDckIsWUFBWSxFQUFFLE9BQU87SUFDckIsWUFBWSxFQUFFLE9BQU87SUFDckIsWUFBWSxFQUFFLE9BQU87SUFDckIsWUFBWSxFQUFFLE9BQU87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

/***/ }),
/* 5 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    FRAME: 0xF0,
    RESET: 0x00
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFwcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtCQUFlO0lBQ1gsS0FBSyxFQUFFLElBQUk7SUFDWCxLQUFLLEVBQUUsSUFBSTtDQUNkLENBQUEifQ==

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Register_js_1 = __webpack_require__(9);
var log_js_1 = __webpack_require__(1);
var hexUtils_js_1 = __webpack_require__(0);
var semantics_js_1 = __webpack_require__(11);
var decoder_js_1 = __webpack_require__(10);
var traps_js_1 = __webpack_require__(6);
var CPU = (function () {
    function CPU(memory) {
        // status
        this.running = false;
        this.paused = false;
        this.stepping = false;
        // register and flag mapping
        this.registers = [
            new Register_js_1.default("A", 2), new Register_js_1.default("B", 2),
            new Register_js_1.default("C", 2), new Register_js_1.default("D", 2),
            new Register_js_1.default("X", 2), new Register_js_1.default("Y", 2),
            new Register_js_1.default("SP", 2), new Register_js_1.default("BP", 2),
            undefined, undefined,
            undefined, undefined,
            new Register_js_1.default("SB", 1), new Register_js_1.default("DB", 1),
            new Register_js_1.default("F", 1), new Register_js_1.default("PC", 2)
        ];
        this.registerMap = {
            A: 0, AL: 0, B: 1, BL: 0,
            C: 2, CL: 2, D: 3, DL: 3,
            X: 4, XL: 4, Y: 5, YL: 5,
            SP: 6, BP: 7, SB: 12, DB: 13,
            F: 14, Flags: 14, PC: 15,
            0: "A(L)", 1: "B(L)", 2: "C(L)", 3: "D(L)",
            4: "X(L)", 5: "Y(L)", 6: "SP", 7: "BP",
            12: "SB", 13: "DB", 14: "Flags", 15: "PC"
        };
        this.flagMap = {
            0: "Z", 1: "N", 2: "C", 3: "V", 4: "E", 5: "X", 6: "M", 7: "I",
            "Z": 0, "N": 1, "C": 2, "V": 3, "E": 4, "X": 5, "M": 6, "I": 7,
            "EQ": 0, "LT": 2, "O": 3
        };
        this.addressingModeMap = ["imm8/rel8", "imm16/rel16", "abs16", "ind16", "relBP", "indBP", "absD", "indD"];
        // need to keep track of memory
        this.memory = memory;
        // semantics for execution
        this.semantics = semantics_js_1.default.semantics;
        this.semanticsMap = semantics_js_1.default.semanticsMap;
        this.mapStateToAsm = semantics_js_1.default.mapStateToAsm.bind(this, this);
        // bind semantic exec to our execute
        this.execute = semantics_js_1.exec.bind(this);
        // also bind decode
        this.decode = decoder_js_1.default.bind(this);
        this.init();
    }
    CPU.prototype.init = function () {
        // give defaults for registers and flags
        this.registers[this.registerMap.SP].U16 = 0x1000;
        this.registers[this.registerMap.BP].U16 = 0x1000;
        this.setFlag(this.flagMap.X);
        this.setFlag(this.flagMap.I);
        // instruction decoding and execution state
        this.state = {};
        this.clearState();
    };
    /**
     * Returns the value of the requested flag
     * @param {number} flag     flag index
     * @returns {boolean}       value of flag
     */
    CPU.prototype.getFlag = function (flag) {
        return (this.registers[this.registerMap.Flags].U8 & (0x01 << flag)) > 0;
    };
    /**
     * Sets the requested flag to 1
     * @param {number} flag     flag to set
     * @return {void}
     */
    CPU.prototype.setFlag = function (flag) {
        this.registers[this.registerMap.Flags].U8 |= (0x01 << flag);
    };
    /**
     * clears the requested flag
     * @param {number} flag     flag to clear
     * @return {void}
     */
    CPU.prototype.clrFlag = function (flag) {
        if (this.getFlag(flag)) {
            this.registers[this.registerMap.Flags].U8 -= (0x01 << flag);
        }
    };
    /**
     * Pushes a register or value onto the stack. If reg is supplied, that contents
     * are pushed onto the stack. If reg is udnefined, v is pushed. In the latter case,
     * dsize must be either 1 (byte) or 2 (word)
     *
     * @param {Register} reg      register to push
     * @param {number} [v]        or value
     * @param {number} [dsize=2]  # bytes to push
     * @return {void}
     */
    CPU.prototype.push = function (reg, v, dsize) {
        if (dsize === void 0) { dsize = 2; }
        var SP = this.registers[this.registerMap.SP];
        var size = (reg ? reg.size : dsize);
        SP.U16 -= size;
        if (size === 1) {
            this.memory.poke(SP.U16, (reg ? reg.U8 : v));
        }
        else {
            this.memory.poke16(SP.U16, (reg ? reg.U16 : v));
        }
    };
    /**
     * Pops a value from the stack and stores it in reg, if provided. Returns the value
     * regardless. If reg is undefined, dsize is used to determine how much to pop --
     * 1 = byte, 2 = word
     *
     * @param {Register} reg        register to pop stack into
     * @param {number} [dsize=2]    size of data
     * @return {number}             value popped
     */
    CPU.prototype.pop = function (reg, dsize) {
        if (dsize === void 0) { dsize = 2; }
        var v;
        var SP = this.registers[this.registerMap.SP];
        var size = (reg ? reg.size : dsize);
        if (size === 1) {
            v = this.memory.peek(SP.U16);
            if (reg) {
                reg.U8 = v;
            }
        }
        else {
            v = this.memory.peek16(SP.U16);
            if (reg) {
                reg.U16 = v;
            }
        }
        SP.U16 += size;
        return v;
    };
    /**
     * Clears the CPU's decode/execute state
     *
     * @return {void}
     */
    CPU.prototype.clearState = function () {
        var state = this.state;
        state.instruction = [];
        state.opcodeType = 0x00; // type of opcode -- if extended, first byte of instruction
        state.opcode = 0x00; // instruction
        state.semantic = 0x00; // what should we actually do?
        state.imm8 = 0x00; // imm8 of instruction, if it makes sense
        state.imm16 = 0x0000; // imm16 of instruction, if it makes sense
        state.srcRegister = 0x00; // source register
        state.destRegister = 0x00; // destination register
        state.othRegister = 0x00; // other register
        state.flag = 0x00; // flag index
        state.srcBank = 0x00; // source bank select
        state.destBank = 0x00; // destination bank select
        state.whichBank = 0x00; // 00 = SB, 01 = DB
        state.addressingMode = 0x00; // addressing mode
        state.indexByX = false;
        state.indexByY = false;
        state.scale = 0;
    };
    /**
     * dumps the CPU's internal state
     * @return {void}
     */
    CPU.prototype.dump = function () {
        var _this = this;
        log_js_1.default("---- REGISTERS");
        log_js_1.default(this.registers.map(function (r) { return (r ? (r ? r.name : "") + ": " + (r ? hexUtils_js_1.default.toHex4(r.U16) : "") + " " : ""); }).join(""));
        log_js_1.default([7, 6, 5, 4, 3, 2, 1, 0].map(function (flag) { return _this.flagMap[flag] + ": " + (_this.getFlag(flag) ? 1 : 0) + ", "; }).join(""));
        log_js_1.default("---- STATE");
        log_js_1.default("inst[]=", this.state.instruction.map(function (b) { return hexUtils_js_1.default.toHex2(b); }), "|", "opcode=", hexUtils_js_1.default.toHex2(this.state.opcode), "|", "semantic=", hexUtils_js_1.default.toHex2(this.state.semantic), this.semanticsMap[this.state.semantic]);
        log_js_1.default("imm8=", hexUtils_js_1.default.toHex2(this.state.imm8), "|", "imm16=", hexUtils_js_1.default.toHex2(this.state.imm16), "|", "srcR=", this.registerMap[this.state.srcRegister], "|", "dstR=", this.registerMap[this.state.destRegister], "|", "flag=", this.flagMap[this.state.flag], "|");
        log_js_1.default("bank selects", "src=", this.state.srcBank, "dst=", this.state.destBank, "|", "address mode=", this.addressingModeMap[this.state.addressingMode], "|", "index by", "X?", this.state.indexByX ? "Y" : "N", "Y?", this.state.indexByY ? "Y" : "N", "|", "scale=", this.state.scale ? "byte" : "word");
        log_js_1.default("");
    };
    /**
     * fetches the desired byte (n) of the current instruction. If n is zero, the CPU's execution
     * and decode state is cleared first.
     * @param {number} n     indicates fetch stage (0 = start of new instruction)
     * @return {void}
     */
    CPU.prototype.fetch = function (n) {
        if (n === 0) {
            //this.clearState();
            this.state.instruction = [];
        }
        var rPC = this.registers[this.registerMap.PC].U16;
        this.state.instruction.push(this.memory.peek(rPC + n));
    };
    /**
     * Advance PC by the length of the current instruction
     * @return {void}
     */
    CPU.prototype.advancePC = function () {
        this.registers[this.registerMap.PC].U16 += this.state.instruction.length;
    };
    /**
     * Steps the CPU by a single instruction. If skipFetch is TRUE, then the expectation is that an
     * instruction is already present in this.state.instruction and that it needs decoded and executed.
     * This is typical of hardware interrupts.
     *
     * @param {boolean} [skipFetch=false]     if true, skip fetch phase (an instruction is already in the pipeline)
     * @return {void}
     */
    CPU.prototype.step = function (skipFetch) {
        if (skipFetch === void 0) { skipFetch = false; }
        if (!skipFetch) {
            this.fetch(0); // get first byte of instruction
        }
        // decode the instruction; additional fetches occur as necessary
        this.decode(!skipFetch);
        // and advance PC, unless we've not fetched an instruction, in which case we shouldn't advance
        if (!skipFetch) {
            this.advancePC();
        }
        // if X is set, execute the instruction. OR, execute it if we're called with skipFetch
        // which means we're probably servicing an interrupt
        if (this.getFlag(this.flagMap.X) || skipFetch) {
            this.execute();
            if (!this.getFlag(this.flagMap.X)) {
                this.step(); // go ahead and skip the next instruction
                this.setFlag(this.flagMap.X); // Flags.X can only skip one cycle
            }
        }
    };
    /**
     * Send a trap to the CPU; actually injects a TRAP instruction and executes it
     * All traps are maskable EXCEPT 0x00 (RESET). If the CPU was previously HALTed,
     * it resumes execution.
     * @param {number} trap       trap to send
     * @return {void}
     */
    CPU.prototype.sendTrap = function (trap) {
        if (trap === traps_js_1.default.RESET || (trap > traps_js_1.default.RESET && this.getFlag(this.flagMap.I))) {
            this.paused = false;
            this.state.instruction = [0x06, 0x01, trap];
            this.step(true); // don't fetch anything -- we want the above instruction
        }
    };
    CPU.prototype.pause = function (imm8) {
        if (imm8 === 0xFF) {
            // Really, really halt!
            this.running = false;
        }
        this.paused = true;
    };
    return CPU;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CPU;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Register = (function () {
    function Register(name, size) {
        this.name = name;
        this.size = size;
        this._mask = [0x03, 0xFF, 0xFFFF][size];
        this._data = 0;
    }
    Object.defineProperty(Register.prototype, "U2", {
        get: function () {
            return this._data & 0x03;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Register.prototype, "U8", {
        get: function () {
            return this._data & 0xFF;
        },
        set: function (value) {
            this._data = (this._data & 0xFF00) | (value & 0xFF);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Register.prototype, "U16", {
        get: function () {
            return this._data & this._mask;
        },
        set: function (value) {
            this._data = value & this._mask;
        },
        enumerable: true,
        configurable: true
    });
    return Register;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSZWdpc3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFFRSxrQkFBYSxJQUFJLEVBQUUsSUFBSTtRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQsc0JBQUksd0JBQUU7YUFBTjtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHdCQUFFO2FBQU47WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDM0IsQ0FBQzthQUVELFVBQU8sS0FBSztZQUNWLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RELENBQUM7OztPQUpBO0lBTUQsc0JBQUkseUJBQUc7YUFBUDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDakMsQ0FBQzthQUVELFVBQVEsS0FBSztZQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbEMsQ0FBQzs7O09BSkE7SUFLSCxlQUFDO0FBQUQsQ0FBQyxBQTVCRCxJQTRCQyJ9

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// exports to be bound to a cpu
function decode(fetch) {
    if (fetch === void 0) { fetch = true; }
    var opcode = this.state.instruction[0];
    var opparm = 0x00;
    var opcodeExt = 0x00;
    var opcodeType = 0x00;
    if (fetch) {
        switch (opcode) {
            case 0x01:
            case 0x02:
            case 0x04:
            case 0x05:
                this.fetch(1);
                break;
            case 0x06:
                this.fetch(1);
                this.fetch(2);
                break;
            case 0x07:
                this.fetch(1);
                this.fetch(2);
                this.fetch(3);
                break;
            default:
        }
        if (opcode >= 0x40 && opcode <= 0xBF) {
            this.fetch(1);
            this.fetch(2);
        }
    }
    this.state.opcodeType = opcodeType;
    this.state.opcode = opcode;
    switch (this.state.instruction.length) {
        case 1:
            if (opcode === 255) {
                this.state.semantic = this.semantics.RET;
                break;
            }
            if (opcode === 0x00) {
                this.state.semantic = this.semantics.NOP;
                break;
            }
            if (opcode === 0x03) {
                this.state.semantic = this.semantics.TRAP;
                this.destRegister = this.registerMap.AL;
                this.srcRegister = this.destRegister;
                break;
            }
            if ((opcode & 248) === 8) {
                this.state.semantic = this.semantics.MOVE;
                this.state.destRegister = (opcode & 4) ? this.registerMap.DB : this.registerMap.SB;
                this.state.srcRegister = (opcode & 3);
                break;
            }
            if ((opcode & 240) === 16) {
                this.state.semantic = (opcode & 8) ? this.semantics.DEC : this.semantics.INC;
                this.state.destRegister = (opcode & 7);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            if ((opcode & 240) === 32) {
                this.state.semantic = (opcode & 8) ? this.semantics.IFNFLAG : this.semantics.IFFLAG;
                this.state.flag = (opcode & 7);
                break;
            }
            if ((opcode & 240) === 48) {
                this.state.semantic = (opcode & 8) ? this.semantics.CLRFLAG : this.semantics.SETFLAG;
                this.state.flag = (opcode & 7);
                break;
            }
            if ((opcode & 224) === 192) {
                this.state.semantic = this.semantics.MOVE;
                this.state.destRegister = (opcode & 28) >> 2;
                this.state.srcRegister = (opcode & 3);
                break;
            }
            if ((opcode & 224) === 224) {
                this.state.semantic = (opcode & 16) ? this.semantics.POP : this.semantics.PUSH;
                this.state.destRegister = (opcode & 15);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        case 2:
            opcodeExt = this.state.instruction[1];
            if ((opcode === 0x01)) {
                this.state.semantic = this.semantics.ENTER;
                this.state.imm8 = opcodeExt;
                break;
            }
            if ((opcode === 0x02)) {
                this.state.semantic = this.semantics.EXIT;
                this.state.imm8 = opcodeExt;
                break;
            }
            if ((opcode === 0x04) && ((opcodeExt & 128) === 0)) {
                this.state.semantic = (opcodeExt & 64) ? this.semantics.SUB : this.semantics.ADD;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x04) && ((opcodeExt & 192) === 128)) {
                this.state.semantic = this.semantics.XOR;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x04) && ((opcodeExt & 192) === 192)) {
                this.state.semantic = this.semantics.CMP;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x05) && ((opcodeExt & 128) === 0)) {
                this.state.semantic = (opcodeExt & 64) ? this.semantics.SHR : this.semantics.SHL;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x05) && ((opcodeExt & 192) === 128)) {
                this.state.semantic = this.semantics.AND;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            if ((opcode === 0x05) && ((opcodeExt & 192) === 192)) {
                this.state.semantic = this.semantics.OR;
                this.state.destRegister = (opcodeExt & 56) >> 3;
                this.state.srcRegister = (opcodeExt & 7);
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        case 3:
            if (opcode === 0x06) {
                opcode = (opcode << 8) | this.state.instruction[1];
                opparm = this.state.instruction[2];
            }
            if ((opcode === 0x0601)) {
                this.state.semantic = this.semantics.TRAP;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x0608)) {
                this.state.semantic = this.semantics.NEG;
                this.state.destRegister = (opparm & 7);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            if ((opcode === 0x0610)) {
                this.state.semantic = this.semantics.BYTESWAP;
                this.state.destRegister = (opparm & 7);
                this.state.srcRegister = this.state.destRegister;
                break;
            }
            if ((opcode === 0x0614)) {
                this.state.semantic = this.semantics.HALT;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x0618)) {
                this.state.semantic = this.semantics.PUSHA;
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if ((opcode === 0x0619)) {
                this.state.semantic = this.semantics.POPA;
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if ((opcode >= 0x0620) && opcode < 0x0640) {
                this.state.srcRegister = (opcode & 7);
                this.state.destRegister = this.state.srcRegister;
                this.state.semantic = [this.semantics.SETR, this.semantics.CLRR, this.semantics.IFR, this.semantics.IFNR][(opcode & 24) >> 3];
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x0640)) {
                this.state.semantic = this.semantics.IMUL;
                this.state.othRegister = (opparm & 192) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x0641)) {
                this.state.semantic = this.semantics.IDIV;
                this.state.othRegister = (opparm & 192) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x0642)) {
                this.state.semantic = this.semantics.IMOD;
                this.state.othRegister = (opparm & 192) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode >= 0x0650) && (opcode <= 0x0653)) {
                var deltaAtoC = 2;
                this.state.semantic = this.semantics.LOOP;
                this.state.srcRegister = (opcode & 0x03) + deltaAtoC;
                this.state.destRegister = this.state.srcRegister;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode === 0x066D)) {
                this.state.semantic = this.semantics.MEMFILL;
                this.state.destBank = (opparm & 128) >> 7;
                this.state.srcBank = 0x00;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x066E)) {
                this.state.semantic = this.semantics.MEMSWAP;
                this.state.destBank = (opparm & 128) >> 7;
                this.state.srcBank = (opparm & 64) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode === 0x066F)) {
                this.state.semantic = this.semantics.MEMCOPY;
                this.state.destBank = (opparm & 128) >> 7;
                this.state.srcBank = (opparm & 64) >> 6;
                this.state.destRegister = (opparm & 56) >> 3;
                this.state.srcRegister = (opparm & 7);
                break;
            }
            if ((opcode & 65520) === 0x0670) {
                this.state.semantic = (opcode & 8) ? this.semantics.OUT : this.semantics.IN;
                this.state.destRegister = (opcode & 7);
                this.state.srcRegister = this.state.destRegister;
                this.state.imm8 = opparm;
                break;
            }
            if ((opcode & 65472) === 0x0680) {
                this.state.semantic = this.semantics.MOVE;
                this.state.destRegister = (opcode & 56) >> 3;
                this.state.srcRegister = (opcode & 7);
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if ((opcode & 65472) === 0x06C0) {
                this.state.semantic = this.semantics.SWAP;
                this.state.destRegister = (opcode & 56) >> 3;
                this.state.srcRegister = (opcode & 7);
                this.state.instruction.pop(); // give a byte back; this is technically a shorter instruction
                break;
            }
            if (opcode >= 0x40 && opcode < 0xC0) {
                this.state.semantic = ((opcode & 192) === 0x80) ? this.semantics.STORE : this.semantics.LOAD;
                this.state.destRegister = this.registerMap.A;
                this.state.srcRegister = this.registerMap.A;
                this.state.addressingMode = (opcode & 56) >> 3;
                this.state.indexByX = (opcode & 4) >> 2;
                this.state.indexByY = (opcode & 2) >> 1;
                this.state.scale = (opcode & 1);
                this.state.whichBank = (this.state.semantic === this.semantics.STORE ? 0x01 : 0x00);
                if (this.state.addressingMode === 0) {
                    this.state.imm8 = (this.state.instruction[1]);
                    this.state.instruction.pop();
                }
                else if (this.state.addressingMode >= 6) {
                    this.state.imm16 = 0;
                    this.state.instruction.pop();
                    this.state.instruction.pop();
                }
                else {
                    this.state.imm16 = (this.state.instruction[1] << 8) | this.state.instruction[2];
                }
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        case 4:
            opcode = this.state.instruction[1];
            if ((opcode & 128) === 0) {
                this.state.semantic = (opcode & 64) ? this.semantics.CALL : this.semantics.BR;
                this.state.addressingMode = (opcode & 56) >> 3;
                this.state.indexByX = (opcode & 4) >> 2;
                this.state.indexByY = (opcode & 2) >> 1;
                this.state.scale = (opcode & 1);
                this.state.whichBank = 0x00;
                if (this.state.scale > 0) {
                    this.state.imm16 = (this.state.instruction[2] << 8) | this.state.instruction[3];
                }
                else {
                    this.state.imm8 = this.state.instruction[2];
                    this.state.instruction.pop(); // give a byte back
                }
                break;
            }
            if ((opcode & 128) === 128) {
                this.state.semantic = (opcode & 64) ? this.semantics.STORE : this.semantics.LOAD;
                this.state.destRegister = this.registerMap.A;
                this.state.srcRegister = this.registerMap.A;
                this.state.addressingMode = (opcode & 56) >> 3;
                this.state.indexByX = (opcode & 4) >> 2;
                this.state.indexByY = (opcode & 2) >> 1;
                this.state.scale = (opcode & 1);
                this.state.whichBank = (this.state.semantic === this.semantics.STORE ? 0x00 : 0x01);
                if (this.state.addressingMode === 0) {
                    this.state.imm8 = (this.state.instruction[2]);
                    this.state.instruction.pop();
                }
                else if (this.state.addressingMode >= 6) {
                    this.state.imm16 = 0;
                    this.state.instruction.pop();
                    this.state.instruction.pop();
                }
                else {
                    this.state.imm16 = (this.state.instruction[2] << 8) | this.state.instruction[3];
                }
                break;
            }
            this.state.semantic = this.semantics.BADOP;
            break;
        default:
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = decode;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hexUtils_js_1 = __webpack_require__(0);
var twosComplement_js_1 = __webpack_require__(2);
var semantics = {
    NOP: 0x00, MOVE: 0x10, SWAP: 0x11, LOAD: 0x20,
    STORE: 0x21, IN: 0x28, OUT: 0x29, MEMFILL: 0x2D,
    MEMCOPY: 0x2E, MEMSWAP: 0x2F, PUSH: 0x30, POP: 0x31,
    PUSHA: 0x32, POPA: 0x33,
    ADD: 0x40, INC: 0x41, SUB: 0x48, DEC: 0x49,
    CMP: 0x4F, IMUL: 0x50, IDIV: 0x51, IMOD: 0x52,
    SHL: 0x58, SHR: 0x59, ROL: 0x5A, ROR: 0x5B,
    XOR: 0x5C, AND: 0x5D, OR: 0x5E, NEG: 0x5F,
    SETFLAG: 0x60, CLRFLAG: 0x61,
    IFR: 0x64, IFNR: 0x65, SETR: 0x66, CLRR: 0x67,
    IFFLAG: 0x68, IFNFLAG: 0x69,
    BR: 0x70, CALL: 0x71, ENTER: 0x72, EXIT: 0x73,
    TRAP: 0x74, BYTESWAP: 0x78, RET: 0x7F, HALT: 0x80,
    LOOP: 0x7A,
    BADOP: 0xFF
};
var semanticAssemblyMap = {
    NOP: "nop", MOVE: "mov DR, SR", SWAP: "swap DR, SR", LOAD: "ldB DR, OP",
    STORE: "stB SR, OP", IN: "in SR, U8", OUT: "out SR, U8", MEMFILL: "mfill DbS : DR, SR * C",
    MEMCOPY: "mcopy DbS : DR, SbS : SR * C", MEMSWAP: "mswap DbS : DR, SbS : SR * C",
    PUSH: "push SR", POP: "pop DR",
    PUSHA: "pusha", POPA: "popa",
    ADD: "add DR, SR", INC: "inc SR", SUB: "sub DR, SR", DEC: "dec SR",
    CMP: "cmp DR, SR", IMUL: "mul OR : DR, SR", IDIV: "idiv OR : DR, SR", IMOD: "imod OR : DR, SR",
    SHL: "shl DR, SR", SHR: "shr DR, SR", ROL: "rol DR, SR", ROR: "ror DR, SR",
    XOR: "xor DR, SR", AND: "and DR, SR", OR: "or DR, SR", NEG: "neg DR",
    SETFLAG: "set F", CLRFLAG: "clr F",
    IFR: "ifr SR, U8", IFNR: "ifnr SR, U8", SETR: "setr SR, U8", CLRR: "clrr SR, U8",
    IFFLAG: "if F", IFNFLAG: "ifn F",
    BR: "br OP", CALL: "call OP", ENTER: "enter U8", EXIT: "exit U8",
    TRAP: "trap OP", BYTESWAP: "xcb SR", RET: "ret", HALT: "halt U8",
    LOOP: "loop LR, S8",
    BADOP: "???"
};
var semanticsMap = Object.keys(semantics).reduce(function (p, c) {
    p[semantics[c]] = c;
    return p;
}, {});
/**
 * Given a `cpu` state, return the assembly instruction that best matches
 *
 * @param {Cpu} cpu     the cpu with state to decode
 * @return {string}     the matching assembly statement
 */
function mapStateToAsm(cpu) {
    var asm = semanticAssemblyMap[semanticsMap[cpu.state.semantic]] || "";
    asm = asm.replace("B", ["s", "d"][cpu.state.whichBank]);
    asm = asm.replace("F", cpu.flagMap[cpu.state.flag]);
    asm = asm.replace("DbS", cpu.registerMap[cpu.state.destBank === 0 ? "SB" : "DB"]);
    asm = asm.replace("SbS", cpu.registerMap[cpu.state.destBank === 0 ? "SB" : "DB"]);
    asm = asm.replace("OR", cpu.registerMap[cpu.state.othRegister] || "BAD");
    asm = asm.replace("SR", cpu.registerMap[cpu.state.srcRegister] || "BAD");
    asm = asm.replace("LR", cpu.registerMap[cpu.state.srcRegister] || "BAD");
    asm = asm.replace("DR", cpu.registerMap[cpu.state.destRegister] || "BAD");
    asm = asm.replace("U8", hexUtils_js_1.default.toHex2(cpu.state.imm8));
    asm = asm.replace("S8", twosComplement_js_1.default.from8(cpu.state.imm8));
    if (asm.indexOf("OP") > -1) {
        // special handling
        switch (cpu.state.semantic) {
            case semantics.LOAD:
            case semantics.STORE:
            case semantics.BR:
            case semantics.CALL:
                {
                    asm = asm.replace(/\(L\)/g, cpu.state.scale === 0 ? "L" : "");
                    var relative = false;
                    var brackets = (cpu.state.addressingMode & 1) === 0 ? "[]" : "()";
                    var indexByX = cpu.state.indexByX ? "+X" : "";
                    var indexByY = cpu.state.indexByY ? "+Y" : "";
                    if (cpu.state.semantic === cpu.semantics.BR ||
                        cpu.state.semantic === cpu.semantics.CALL) {
                        relative = true;
                    }
                    switch (cpu.state.addressingMode) {
                        case 0:
                            asm = asm.replace("OP", relative ? twosComplement_js_1.default.from8(cpu.state.imm8) : hexUtils_js_1.default.toHex2(cpu.state.imm8));
                            break;
                        case 1:
                            asm = asm.replace("OP", relative ? twosComplement_js_1.default.from16(cpu.state.imm16) : hexUtils_js_1.default.toHex4(cpu.state.imm16));
                            break;
                        case 2:
                            asm = asm.replace("OP", brackets[0] + hexUtils_js_1.default.toHex4(cpu.state.imm16) + indexByX + indexByY + brackets[1]);
                            break;
                        case 3:
                            asm = asm.replace("OP", brackets[0] + hexUtils_js_1.default.toHex4(cpu.state.imm16) + indexByX + brackets[1] + indexByY);
                            break;
                        case 4:
                            asm = asm.replace("OP", brackets[0] + "BP+" + hexUtils_js_1.default.toHex4(cpu.state.imm16) + indexByX + indexByY + brackets[1]);
                            break;
                        case 5:
                            asm = asm.replace("OP", brackets[0] + "BP+" + hexUtils_js_1.default.toHex4(cpu.state.imm16) + indexByX + brackets[1] + indexByY);
                            break;
                        case 6:
                            asm = asm.replace("OP", brackets[0] + "D" + indexByX + indexByY + brackets[1]);
                            break;
                        case 7:
                            asm = asm.replace("OP", brackets[0] + "D" + indexByX + brackets[1] + indexByY);
                            break;
                        default:
                    }
                }
                break;
            case semantics.TRAP:
                asm = asm.replace("OP", (cpu.state.opcode === 0x03 ? "AL" : hexUtils_js_1.default.toHex2(cpu.state.imm8)));
                break;
            default:
        }
    }
    else {
        asm = asm.replace(/\(L\)/g, "");
    }
    return asm;
}
function addUpdatingFlags(cpu, a, b, size) {
    if (size === void 0) { size = 16; }
    var unsignedSize = (size === 16 ? 65536 : 256);
    var unsignedMax = unsignedSize - 1;
    var signedSize = (size === 16 ? 32768 : 128);
    var signedMax = signedSize - 1;
    var neg = (size === 16 ? 32768 : 128);
    // clear overflow and carry
    cpu.clrFlag(cpu.flagMap.V);
    cpu.clrFlag(cpu.flagMap.C);
    /*eslint-disable no-var, vars-on-top*/
    // Chrome deopts this because v is modified later ...
    var v = (a & unsignedMax) + (b & unsignedMax);
    /*eslint-enable no-var, vars-on-top*/
    // carry is easy -- use the MSB of the operation
    if (v > unsignedMax) {
        cpu.setFlag(cpu.flagMap.C);
    }
    // handle overflow
    if ((a & neg) === (b & neg)) {
        var opSigns = ((a & neg) | (b & neg)) ? 1 : 0;
        var resultSign = (v > signedMax) ? 1 : 0;
        if (opSigns !== resultSign) {
            cpu.setFlag(cpu.flagMap.V);
        }
    }
    v &= unsignedMax;
    return v;
}
function subtractUpdatingFlags(cpu, a, b, size) {
    if (size === void 0) { size = 16; }
    return addUpdatingFlags(cpu, a, (-b) & (size === 16 ? 0xFFFF : 0xFF), size);
}
/**
 * shifts a by b times in the direction specified by `dir`; rotation is determined
 * by mode
 *
 * @param {Cpu} cpu                 the cpu
 * @param {integer} a               value to shift
 * @param {integer} b               times to shift
 * @param {integer} [size]          size of value we're shifting
 * @param {integer} [dir]           direction; -1 is left, 1 is right
 * @param {integer} [mode]          mode; 0 = shift; 1 = rotate
 * @return {integer}                result
 */
function shiftUpdatingFlags(cpu, a, b, size, dir, mode) {
    if (size === void 0) { size = 16; }
    if (dir === void 0) { dir = -1; }
    if (mode === void 0) { mode = 0; }
    var msbmask = (size === 16) ? 0x8000 : 0x80;
    var maxint = (size === 16) ? 0xFFFF : 0xFF;
    var lsbmask = 0x01;
    /*eslint-disable no-var, vars-on-top*/
    var r = a;
    /*eslint-enable no-var, vars-on-top*/
    cpu.clrFlag(cpu.flagMap.V);
    cpu.clrFlag(cpu.flagMap.C);
    if (mode === 0 && b >= 16) {
        b = 16;
    }
    if (mode === 1) {
        b &= 0x0F;
    }
    for (var i = 0; i < b; i++) {
        var bitShiftingOut = r & ((dir < 0) ? msbmask : lsbmask);
        r = ((dir < 0) ? r << 1 : r >> 1) & maxint;
        if (mode > 0) {
            // rotating!
            if (bitShiftingOut > 0) {
                r |= (dir < 0) ? lsbmask : msbmask;
            }
        }
        else {
            // shifting; set carry if bit shifted out
            if (bitShiftingOut > 0) {
                cpu.setFlag(cpu.flagMap.C);
            }
        }
    }
    return r;
}
function handleFlags(cpu, v, size) {
    if (size === void 0) { size = 16; }
    var unsignedSize = (size === 16 ? 65536 : 256);
    var unsignedMax = unsignedSize - 1;
    var signedSize = (size === 16 ? 32768 : 128);
    var signedMax = signedSize - 1;
    // handle Zero flag
    (v !== 0) ? cpu.clrFlag(cpu.flagMap.Z) : cpu.setFlag(cpu.flagMap.Z);
    // handle Negative flag
    cpu.clrFlag(cpu.flagMap.N);
    if (v < 0) {
        v = (unsignedSize + v) & unsignedMax;
    }
    if (v > signedMax) {
        cpu.setFlag(cpu.flagMap.N);
    }
    return v & unsignedMax;
}
function getAddr(cpu, bankSelect) {
    /*eslint-disable no-var, vars-on-top*/
    var addr;
    /*eslint-enable no-var, vars-on-top*/
    var indirect = Boolean(cpu.state.addressingMode & 1);
    switch (cpu.state.addressingMode) {
        case 2:
        case 3:
            addr = cpu.state.imm16;
            break;
        case 4:
        case 5:
            addr = twosComplement_js_1.default.from16(cpu.state.imm16);
            addr = cpu.registers[cpu.registerMap.BP].U16 + addr;
            break;
        case 6:
        case 7:
            addr = cpu.registers[cpu.registerMap.D].U16;
            break;
        default:
    }
    // make sure bank is added in
    if ((cpu.state.addressingMode < 4) || (cpu.state.addressingMode > 5)) {
        // BP can only be from bank 0x00
        addr |= (cpu.registers[cpu.registerMap.SB + bankSelect].U2) << 16;
    }
    // index by X first, if we must
    if (cpu.state.indexByX) {
        addr += cpu.registers[cpu.registerMap.X].U16 << cpu.state.scale;
    }
    // indirect
    if (indirect) {
        addr = (addr & 0x30000) | cpu.memory.peek16(addr);
    }
    // index by Y if we must
    if (cpu.state.indexByY) {
        addr += cpu.registers[cpu.registerMap.Y].U16 << cpu.state.scale;
    }
    return addr;
}
var semanticsOps = (_a = {},
    _a[semantics.NOP] = function nop() { },
    _a[semantics.MOVE] = function move(cpu) { cpu.registers[cpu.state.destRegister].U16 = cpu.registers[cpu.state.srcRegister].U16; },
    _a[semantics.SWAP] = function swap(cpu) {
        _a = [cpu.registers[cpu.state.srcRegister].U16, cpu.registers[cpu.state.destRegister].U16], cpu.registers[cpu.state.destRegister].U16 = _a[0], cpu.registers[cpu.state.srcRegister].U16 = _a[1];
        var _a;
    },
    _a[semantics.LOAD] = function load(cpu) {
        var dreg = cpu.registers[cpu.state.destRegister];
        if (cpu.state.addressingMode === 0) {
            dreg.U8 = cpu.state.imm8;
        }
        else if (cpu.state.addressingMode === 1) {
            dreg.U16 = cpu.state.imm16;
        }
        else {
            if (cpu.state.scale) {
                dreg.U16 = handleFlags(cpu, cpu.memory.peek16(getAddr(cpu, cpu.state.whichBank)), 16);
            }
            else {
                dreg.U8 = handleFlags(cpu, cpu.memory.peek(getAddr(cpu, cpu.state.whichBank)), 8);
            }
        }
    },
    _a[semantics.STORE] = function store(cpu) {
        var sreg = cpu.registers[cpu.state.srcRegister];
        var addr;
        if (cpu.state.addressingMode < 2) {
            // can't store to immediate values
            return;
        }
        else {
            if (cpu.state.scale) {
                addr = getAddr(cpu, cpu.state.whichBank);
                //if ((addr & 0x3C000) !== 0xC000) {
                // avoid ROM
                cpu.memory.poke16(addr, sreg.U16);
            }
            else {
                addr = getAddr(cpu, cpu.state.whichBank);
                //if ((addr & 0x3C000) !== 0xC000) {
                // avoid ROM
                cpu.memory.poke(addr, sreg.U8);
            }
        }
    },
    _a[semantics.IN] = function _in(cpu) {
        var dreg = cpu.registers[cpu.state.destRegister];
        dreg.U8 = handleFlags(cpu, cpu.memory.peek(cpu.memory.layout.iobot + cpu.state.imm8));
        /* previous implementation used a separate IO
        if (!cpu.io) {
            cpu.setFlag(cpu.flagMap.E);
            cpu.registers[cpu.state.destRegister].U8 = handleFlags(cpu, 0x00, 8);
            return;
        }
        let data = cpu.io.read(cpu.state.imm8);
        if (data !== undefined) {
            cpu.clrFlag(cpu.flagMap.E);
        } else {
            data = 0x00;
            cpu.setFlag(cpu.flagMap.E);
        }
        cpu.registers[cpu.state.destRegister].U8 = handleFlags(cpu, data, 8);
        */
    },
    _a[semantics.OUT] = function _out(cpu) {
        var sreg = cpu.registers[cpu.state.srcRegister];
        cpu.memory.poke(cpu.memory.layout.iobot + cpu.state.imm8, sreg.U8);
        /* previous implementation used separate IO
        if (cpu.io) {
            cpu.io.write(cpu.state.imm8, cpu.registers[cpu.state.srcRegister].U8);
        }
        */
    },
    _a[semantics.MEMFILL] = function memfill(cpu) {
        var c = cpu.registers[cpu.registerMap.C].U16;
        var sr = cpu.registers[cpu.state.srcRegister].U8;
        var db = (cpu.registers[cpu.state.destBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var da = cpu.registers[cpu.state.destRegister].U16;
        var daddr = (db | da);
        cpu.memory.fillWithin({ value: sr, addr: daddr, len: c });
    },
    _a[semantics.MEMCOPY] = function memcopy(cpu) {
        var c = cpu.registers[cpu.registerMap.C].U16;
        var sb = (cpu.registers[cpu.state.srcBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var sa = cpu.registers[cpu.state.srcRegister].U16;
        var db = (cpu.registers[cpu.state.destBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var da = cpu.registers[cpu.state.destRegister].U16;
        var daddr = (db | da);
        var saddr = (sb | sa);
        cpu.memory.copyWithin({ src: saddr, dest: daddr, len: c });
    },
    _a[semantics.MEMSWAP] = function memswap(cpu) {
        var c = cpu.registers[cpu.registerMap.C].U16;
        var sb = (cpu.registers[cpu.state.srcBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var sa = cpu.registers[cpu.state.srcRegister].U16;
        var db = (cpu.registers[cpu.state.destBank === 0 ? cpu.registerMap.SB : cpu.registerMap.DB].U2) << 16;
        var da = cpu.registers[cpu.state.destRegister].U16;
        var daddr = (db | da);
        var saddr = (sb | sa);
        var sbuf = cpu.memory.copyFromRange(saddr, c);
        var dbuf = cpu.memory.copyFromRange(daddr, c);
        cpu.memory.setWithin({ data: dbuf, addr: saddr });
        cpu.memory.setWithin({ data: sbuf, addr: daddr });
    },
    _a[semantics.PUSH] = function push(cpu) {
        var sreg = cpu.registers[cpu.state.srcRegister];
        if (!sreg) {
            return;
        }
        cpu.push(sreg);
    },
    _a[semantics.PUSHA] = function pusha(cpu) {
        var sreg;
        for (var i = 0; i < cpu.registers.length; i++) {
            sreg = cpu.registers[i];
            if (sreg && sreg.name !== "PC") {
                cpu.push(sreg);
            }
        }
    },
    _a[semantics.POP] = function pop(cpu) {
        var dreg = cpu.registers[cpu.state.destRegister];
        if (!dreg) {
            return;
        }
        cpu.pop(dreg);
    },
    _a[semantics.POPA] = function popa(cpu) {
        var sreg;
        for (var i = cpu.registers.length - 1; i >= 0; i--) {
            sreg = cpu.registers[i];
            if (sreg && sreg.name !== "PC") {
                cpu.pop(sreg);
            }
        }
    },
    _a[semantics.ADD] = function add(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, addUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16), 16);
    },
    _a[semantics.SUB] = function sub(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, subtractUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16), 16);
    },
    _a[semantics.INC] = function inc(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, addUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, 1, 16), 16);
    },
    _a[semantics.DEC] = function dec(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, subtractUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, 1, 16), 16);
    },
    _a[semantics.CMP] = function cmp(cpu) {
        // compare is just subraction without storing the result -- just flags!
        handleFlags(cpu, subtractUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16), 16);
    },
    _a[semantics.IMUL] = function imul(cpu) {
        var result = ((cpu.registers[cpu.state.othRegister].U16 << 16) | cpu.registers[cpu.state.destRegister].U16) * cpu.registers[cpu.state.srcRegister].U16;
        cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, result & 0x0000FFFF, 16);
        cpu.clrFlag(cpu.flagMap.C);
        cpu.clrFlag(cpu.flagMap.V);
        if (result > 65535) {
            cpu.registers[cpu.state.othRegister].U16 = (result & 0xFFFF0000) >> 16;
            cpu.setFlag(cpu.flagMap.C);
            cpu.setFlag(cpu.flagMap.V);
        }
    },
    _a[semantics.IDIV] = function idiv(cpu) {
        var _a = [(cpu.registers[cpu.state.othRegister].U16 << 16) | cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16], a = _a[0], b = _a[1];
        cpu.clrFlag(cpu.flagMap.E);
        if (b === 0) {
            cpu.setFlag(cpu.flagMap.E); // can't divide by zero!
        }
        else {
            var result = Math.floor(a / b);
            cpu.clrFlag(cpu.flagMap.C);
            cpu.clrFlag(cpu.flagMap.V);
            cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, result & 0x0000FFFF, 16);
            if (result > 65535) {
                cpu.registers[cpu.state.othRegister].U16 = (result & 0xFFFF0000) >> 16;
                cpu.setFlag(cpu.flagMap.C);
                cpu.setFlag(cpu.flagMap.V);
            }
        }
    },
    _a[semantics.IMOD] = function imod(cpu) {
        var _a = [(cpu.registers[cpu.state.othRegister].U16 << 16) | cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16], a = _a[0], b = _a[1];
        cpu.clrFlag(cpu.flagMap.E);
        if (b === 0) {
            cpu.setFlag(cpu.flagMap.E); // can't divide by zero!
        }
        else {
            var result = Math.floor(a % b);
            cpu.clrFlag(cpu.flagMap.C);
            cpu.clrFlag(cpu.flagMap.V);
            cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, result & 0x0000FFFF, 16);
            if (result > 65535) {
                cpu.registers[cpu.state.othRegister].U16 = (result & 0xFFFF0000) >> 16;
                cpu.setFlag(cpu.flagMap.C);
                cpu.setFlag(cpu.flagMap.V);
            }
        }
    },
    _a[semantics.SHL] = function shl(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, shiftUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16, -1, (cpu.getFlag(cpu.flagMap.M) ? 1 : 0)), 16);
    },
    _a[semantics.SHR] = function shr(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, shiftUpdatingFlags(cpu, cpu.registers[cpu.state.destRegister].U16, cpu.registers[cpu.state.srcRegister].U16, 16, +1, (cpu.getFlag(cpu.flagMap.M) ? 1 : 0)), 16);
    },
    _a[semantics.ROL] = undefined,
    _a[semantics.ROR] = undefined,
    _a[semantics.AND] = function and(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, cpu.registers[cpu.state.destRegister].U16 & cpu.registers[cpu.state.srcRegister].U16, 16);
    },
    _a[semantics.OR] = function or(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, cpu.registers[cpu.state.destRegister].U16 | cpu.registers[cpu.state.srcRegister].U16, 16);
    },
    _a[semantics.XOR] = function xor(cpu) {
        cpu.registers[cpu.state.destRegister].U16 =
            handleFlags(cpu, cpu.registers[cpu.state.destRegister].U16 ^ cpu.registers[cpu.state.srcRegister].U16, 16);
    },
    _a[semantics.NEG] = function neg(cpu) {
        // if M is set, 1's complement (NOT)
        cpu.registers[cpu.state.destRegister].U16 = handleFlags(cpu, (cpu.getFlag(cpu.flagMap.M) ? 255 : 256) - cpu.registers[cpu.state.destRegister].U16);
    },
    _a[semantics.SETFLAG] = function setflag(cpu) { cpu.setFlag(cpu.state.flag); },
    _a[semantics.CLRFLAG] = function clrflag(cpu) { cpu.clrFlag(cpu.state.flag); },
    _a[semantics.IFFLAG] = function ifflag(cpu) { if (!cpu.getFlag(cpu.state.flag)) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.IFNFLAG] = function ifnflag(cpu) { if (cpu.getFlag(cpu.state.flag)) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.SETR] = function setr(cpu) { cpu.registers[cpu.state.srcRegister].U8 |= cpu.state.imm8; },
    _a[semantics.CLRR] = function clrr(cpu) { cpu.registers[cpu.state.srcRegister].U8 &= (0xFF - cpu.state.imm8); },
    _a[semantics.IFR] = function ifr(cpu) { if (!(((cpu.registers[cpu.state.srcRegister].U8 & cpu.state.imm8)) > 0)) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.IFNR] = function ifnr(cpu) { if (((cpu.registers[cpu.state.srcRegister].U8 & cpu.state.imm8)) > 0) {
        cpu.clrFlag(cpu.flagMap.X);
    } },
    _a[semantics.BR] = function br(cpu) {
        var PC = cpu.registers[cpu.registerMap.PC];
        if (cpu.state.addressingMode === 0) {
            PC.U16 += twosComplement_js_1.default.from8(cpu.state.imm8);
        }
        else if (cpu.state.addressingMode === 1) {
            PC.U16 += twosComplement_js_1.default.from16(cpu.state.imm16);
        }
        else {
            PC.U16 = getAddr(cpu, cpu.state.whichBank) & 0xFFFF;
        }
    },
    _a[semantics.CALL] = function call(cpu) {
        cpu.push(cpu.registers[cpu.registerMap.PC]);
        semanticsOps[semantics.BR](cpu);
    },
    _a[semantics.LOOP] = function loop(cpu) {
        var reg = cpu.registers[cpu.state.srcRegister];
        reg.U16 = handleFlags(cpu, subtractUpdatingFlags(cpu, reg.U16, 1, 16), 16);
        if (cpu.getFlag(cpu.flagMap.C)) {
            var PC = cpu.registers[cpu.registerMap.PC];
            PC.U16 += twosComplement_js_1.default.from8(cpu.state.imm8);
        }
    },
    _a[semantics.TRAP] = function trap(cpu) {
        var PC = cpu.registers[cpu.registerMap.PC];
        var v, i;
        cpu.push(PC);
        if (cpu.state.opcode === 0x03) {
            // trap registers
            i = cpu.registers[cpu.registerMap.AL].U8;
        }
        else {
            i = cpu.state.imm8;
        }
        v = cpu.memory.peek16(i << 1); // get vector
        PC.U16 = v;
    },
    _a[semantics.RET] = function ret(cpu) {
        cpu.pop(cpu.registers[cpu.registerMap.PC]);
    },
    _a[semantics.BYTESWAP] = function byteswap(cpu) {
        var reg = cpu.registers[cpu.state.srcRegister];
        var hi = (reg.U16 & 0xFF00) >> 8;
        var lo = (reg.U16 & 0x00FF);
        reg.U16 = (lo << 8) | hi;
    },
    _a[semantics.ENTER] = function enter(cpu) {
        var BP = cpu.registers[cpu.registerMap.BP];
        var SP = cpu.registers[cpu.registerMap.SP];
        cpu.push(SP);
        cpu.push(BP);
        BP.U16 = SP.U16;
        SP.U16 -= cpu.state.imm8;
    },
    _a[semantics.EXIT] = function exit(cpu) {
        var BP = cpu.registers[cpu.registerMap.BP];
        var SP = cpu.registers[cpu.registerMap.SP];
        SP.U16 += cpu.state.imm8;
        cpu.pop(BP);
        cpu.pop(SP);
    },
    _a[semantics.HALT] = function halt(cpu) {
        cpu.pause(cpu.state.imm8);
    },
    _a);
// this expects to be bound to a cpu
function exec() {
    var op = semanticsOps[this.state.semantic];
    if (op) {
        op(this);
    }
    else {
        this.setFlag(this.flagMap.E);
        this.sendTrap(0xFE);
    }
}
exports.exec = exec;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    semantics: semantics,
    semanticsMap: semanticsMap,
    semanticAssemblyMap: semanticAssemblyMap,
    mapStateToAsm: mapStateToAsm
};
var _a;
//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals self, Atomics */
var Cpu_js_1 = __webpack_require__(7);
var Memory_js_1 = __webpack_require__(3);
var memoryLayout_js_1 = __webpack_require__(4);
var traps_js_1 = __webpack_require__(6);
var CPUWorker = (function () {
    function CPUWorker() {
        this.cpu = new Cpu_js_1.default();
        this.stats = {
            numInstructions: 0
        };
        this.tick = this.tick.bind(this);
    }
    CPUWorker.prototype.setSentinel = function (sentinel) {
        this.sentinel = new Uint8Array(sentinel);
    };
    CPUWorker.prototype.setSharedMemory = function (sharedArrayBuffer) {
        this.cpu.memory = new Memory_js_1.default(memoryLayout_js_1.default, { withSharedArrayBuffer: sharedArrayBuffer });
    };
    CPUWorker.prototype.setSharedIO = function () {
    };
    CPUWorker.prototype.init = function () {
        this.stats.numInstructions = 0;
        this.cpu.init();
    };
    CPUWorker.prototype.getStats = function (_, postMessage) {
        postMessage({
            cmd: "stats",
            data: this.stats
        });
    };
    CPUWorker.prototype.getStatus = function (_, postMessage) {
        postMessage({
            cmd: "status",
            data: {
                running: this.cpu.running,
                stepping: this.cpu.stepping,
                paused: this.cpu.paused
            }
        });
    };
    CPUWorker.prototype.getState = function (_, postMessage) {
        postMessage({
            cmd: "state",
            data: this.cpu.state
        });
    };
    CPUWorker.prototype.getRegisters = function (_, postMessage) {
        postMessage({
            cmd: "registers",
            data: this.cpu.registers.map(function (register) {
                if (register) {
                    return {
                        name: register.name,
                        size: register.size,
                        U8: register.U8,
                        U16: register.U16
                    };
                }
                else {
                    return undefined;
                }
            })
        });
    };
    CPUWorker.prototype.start = function () {
        this.cpu.stepping = false;
        if (this.cpu.running) {
            return;
        }
        this.cpu.running = true;
        this.tick();
    };
    CPUWorker.prototype.tick = function () {
        if (this.sentinel) {
            while (this.cpu.running && !this.cpu.paused) {
                this.cpu.step();
                this.stats.numInstructions++;
                if (Atomics.load(this.sentinel, 0) !== 0) {
                    Atomics.store(this.sentinel, 0);
                    //console.log("attention requested");
                    break;
                }
            }
        }
        else {
            var now = performance.now();
            var stopAt = now + 12;
            while (performance.now() < stopAt && (this.cpu.running && !this.cpu.paused)) {
                for (var i = 0; i < 100; i++) {
                    if (this.cpu.running && !this.cpu.paused) {
                        this.cpu.step();
                        this.stats.numInstructions++;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        if (this.cpu.running && !this.cpu.stepping) {
            setTimeout(this.tick, 0);
        }
    };
    CPUWorker.prototype.stop = function () {
        this.cpu.running = false;
    };
    CPUWorker.prototype.step = function () {
        this.cpu.stepping = true;
        this.cpu.step();
        this.stats.numInstructions++;
        this.cpu.stepping = false;
        this.cpu.running = false;
    };
    CPUWorker.prototype.trap = function (trap) {
        this.cpu.sendTrap(trap);
    };
    CPUWorker.prototype.hardReset = function () {
        this.init();
    };
    CPUWorker.prototype.softReset = function () {
        this.cpu.sendTrap(traps_js_1.default.RESET);
    };
    return CPUWorker;
}());
var cpuWorker = new CPUWorker();
self.addEventListener("message", function (e) {
    //console.log(e);
    var cmd = e.data.cmd;
    var data = e.data.data;
    if (cpuWorker[cmd]) {
        cpuWorker[cmd](data, self.postMessage);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3B1V29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ3B1V29ya2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQkFBMkI7QUFDM0IseUNBQWlDO0FBQ2pDLCtDQUF1QztBQUV2QywyREFBbUQ7QUFDbkQsNkNBQXFDO0FBRXJDO0lBQ0k7UUFDSSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksZ0JBQUcsRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxlQUFlLEVBQUUsQ0FBQztTQUNyQixDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLFFBQVE7UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsbUNBQWUsR0FBZixVQUFnQixpQkFBaUI7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxtQkFBTSxDQUFDLHlCQUFZLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVELCtCQUFXLEdBQVg7SUFDQSxDQUFDO0lBRUQsd0JBQUksR0FBSjtRQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCw0QkFBUSxHQUFSLFVBQVMsQ0FBQyxFQUFFLFdBQVc7UUFDbkIsV0FBVyxDQUFDO1lBQ1IsR0FBRyxFQUFFLE9BQU87WUFDWixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDZCQUFTLEdBQVQsVUFBVSxDQUFDLEVBQUUsV0FBVztR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

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,